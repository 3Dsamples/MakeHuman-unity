// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  SEIKICHI-PC
// DateTime: 2019/07/05 9:14:39
// UserName: Seikichi
// Input file <CTexParser.y - 2019/07/05 9:14:08>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using UnityEditor;
using UnityEngine;
using System.IO;
using System.Diagnostics;
using KS;

namespace CTexParser
{
internal enum Tokens {error=128,EOF=129,TK_ERROR=130,OR=131,AND=132,
    EQ=133,GT=134,GE=135,LT=136,LE=137,NE=138,
    NOT=139,SHIFT_LEFT=140,SHIFT_RIGHT=141,IDENTIFIER=142,VARIABLE=143,LIT_STRING=144,
    PART_DEF=145,LIT_INTEGER=146,LIT_FLOAT=147,CONSTANT=148,PROPERTY_ID=149,NODIVIDE=150,
    DIVIDE3H=151,DIVIDE3V=152,DIVIDE9=153,DITHER=154,RESOURCE=155,SHADER=156,
    COLOR=157,ON=158,OFF=159,FORMAT=160,TEXTURE_FORMAT_ALPHA8=161,TEXTURE_FORMAT_ARGB4444=162,
    TEXTURE_FORMAT_RGB24=163,TEXTURE_FORMAT_RGBA32=164,TEXTURE_FORMAT_ARGB32=165,TEXTURE_FORMAT_RGB565=166,TEXTURE_FORMAT_R16=167,TEXTURE_FORMAT_DXT1=168,
    TEXTURE_FORMAT_DXT5=169,TEXTURE_FORMAT_RGBA4444=170,TEXTURE_FORMAT_BGRA32=171,TEXTURE_FORMAT_RHalf=172,TEXTURE_FORMAT_RGHal=173,TEXTURE_FORMAT_RGBAHalf=174,
    TEXTURE_FORMAT_RFloat=175,TEXTURE_FORMAT_RGFloat=176,TEXTURE_FORMAT_RGBAFloat=177,TEXTURE_FORMAT_YUY2=178,TEXTURE_FORMAT_PVRTC_RGB2=179,TEXTURE_FORMAT_PVRTC_RGBA2=180,
    TEXTURE_FORMAT_PVRTC_RGB4=181,TEXTURE_FORMAT_PVRTC_RGBA4=182,TEXTURE_FORMAT_ETC_RGB4=183,TEXTURE_FORMAT_EAC_R=184,TEXTURE_FORMAT_EAC_R_SIGNED=185,TEXTURE_FORMAT_EAC_RG=186,
    TEXTURE_FORMAT_EAC_RG_SIGNED=187,TEXTURE_FORMAT_ETC2_RGB=188,TEXTURE_FORMAT_ETC2_RGBA1=189,TEXTURE_FORMAT_ETC2_RGBA8=190,TEXTURE_FORMAT_ASTC_RGB_4x4=191,TEXTURE_FORMAT_ASTC_RGB_5x5=192,
    TEXTURE_FORMAT_ASTC_RGB_6x6=193,TEXTURE_FORMAT_ASTC_RGB_8x8=194,TEXTURE_FORMAT_ASTC_RGB_10x10=195,TEXTURE_FORMAT_ASTC_RGB_12x12=196,TEXTURE_FORMAT_ASTC_RGBA_4x4=197,TEXTURE_FORMAT_ASTC_RGBA_6x6=198,
    TEXTURE_FORMAT_ASTC_RGBA_8x8=199,TEXTURE_FORMAT_ASTC_RGBA_10x10=200,TEXTURE_FORMAT_ASTC_RGBA_12x12=201,TEXTURE_FORMAT_PNG=202,TEXTURE_FORMAT_JPG=203,FILTER=204,
    FILTER_POINT=205,FILTER_BILINEAR=206,FILTER_TRILINEAR=207,IMPORT=208,SUBSTITUTE_ADD=209,SUBSTITUTE_SUB=210,
    SUBSTITUTE_MUL=211,SUBSTITUTE_DIV=212,POW=213,INCREMENT=214,DECREMENT=215,NEG=216};

internal partial struct ValueType
#line 17 "CTexParser.y"
       {
	public char					c;
	public string				str;
	public double				value;
	public uint					uvalue;
	public Vector2				pair;
	public int					boolean;
	public CTexParserProperty	prop;
	public CTexParserPart		part;
	public TextureFormat		format;
	public FilterMode			filter;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from CTexParser.y - 2019/07/05 9:14:08
#line 10 "CTexParser.y"
//==============================================================================================
/*!Texture Parser.
	@file  CTexParser.y
*/
//==============================================================================================
#line default
  // End verbatim content from CTexParser.y - 2019/07/05 9:14:08

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[108];
  private static State[] states = new State[193];
  private static string[] nonTerms = new string[] {
      "statement", "statement_list", "partdef", "substitute", "expression", "strexp", 
      "onoff", "id", "property", "property_list", "substitute_in_part", "variable", 
      "format", "filter", "top", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{143,50,145,53,155,118,156,122,154,131,160,135,204,182,208,189},new int[]{-15,1,-2,3,-1,192,-4,5,-12,7,-3,51});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{143,50,145,53,155,118,156,122,154,131,160,135,204,182,208,189,129,-2},new int[]{-1,4,-4,5,-12,7,-3,51});
    states[4] = new State(-4);
    states[5] = new State(new int[]{59,6});
    states[6] = new State(-5);
    states[7] = new State(new int[]{61,8,209,42,210,44,211,46,212,48,59,-13});
    states[8] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,9});
    states[9] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-14});
    states[10] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,11});
    states[11] = new State(new int[]{124,-43,38,12,94,14,43,-43,45,-43,140,-43,141,-43,213,-43,42,-43,47,-43,37,-43,59,-43,41,-43,44,-43});
    states[12] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,13});
    states[13] = new State(-44);
    states[14] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,15});
    states[15] = new State(new int[]{124,-45,38,12,94,-45,43,-45,45,-45,140,-45,141,-45,213,-45,42,-45,47,-45,37,-45,59,-45,41,-45,44,-45});
    states[16] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,17});
    states[17] = new State(new int[]{124,10,38,12,94,14,43,-46,45,-46,140,20,141,22,213,24,42,26,47,28,37,30,59,-46,41,-46,44,-46});
    states[18] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,19});
    states[19] = new State(new int[]{124,10,38,12,94,14,43,-47,45,-47,140,20,141,22,213,24,42,26,47,28,37,30,59,-47,41,-47,44,-47});
    states[20] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,21});
    states[21] = new State(new int[]{124,10,38,12,94,14,43,-48,45,-48,140,-48,141,-48,213,24,42,26,47,28,37,30,59,-48,41,-48,44,-48});
    states[22] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,23});
    states[23] = new State(new int[]{124,10,38,12,94,14,43,-49,45,-49,140,-49,141,-49,213,24,42,26,47,28,37,30,59,-49,41,-49,44,-49});
    states[24] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,25});
    states[25] = new State(new int[]{124,10,38,12,94,14,43,-50,45,-50,140,-50,141,-50,213,-50,42,-50,47,-50,37,-50,59,-50,41,-50,44,-50});
    states[26] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,27});
    states[27] = new State(new int[]{124,10,38,12,94,14,43,-51,45,-51,140,-51,141,-51,213,-51,42,-51,47,-51,37,-51,59,-51,41,-51,44,-51});
    states[28] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,29});
    states[29] = new State(new int[]{124,10,38,12,94,14,43,-52,45,-52,140,-52,141,-52,213,-52,42,-52,47,-52,37,-52,59,-52,41,-52,44,-52});
    states[30] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,31});
    states[31] = new State(new int[]{124,10,38,12,94,14,43,-53,45,-53,140,-53,141,-53,213,-53,42,-53,47,-53,37,-53,59,-53,41,-53,44,-53});
    states[32] = new State(-40);
    states[33] = new State(-41);
    states[34] = new State(-42);
    states[35] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,36});
    states[36] = new State(-54);
    states[37] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,38});
    states[38] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-55,41,-55,44,-55});
    states[39] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,40});
    states[40] = new State(new int[]{41,41,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[41] = new State(-56);
    states[42] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,43});
    states[43] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-15});
    states[44] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,45});
    states[45] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-16});
    states[46] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,47});
    states[47] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-17});
    states[48] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,49});
    states[49] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-18});
    states[50] = new State(-25);
    states[51] = new State(new int[]{59,52});
    states[52] = new State(-6);
    states[53] = new State(new int[]{40,54});
    states[54] = new State(new int[]{144,111,146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-8,55,-5,112});
    states[55] = new State(new int[]{44,56,41,113});
    states[56] = new State(new int[]{144,111,146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-8,57,-5,112});
    states[57] = new State(new int[]{41,58});
    states[58] = new State(new int[]{123,59,59,-28});
    states[59] = new State(new int[]{150,64,151,65,152,70,153,75,154,84,157,89,143,50},new int[]{-10,60,-9,110,-11,98,-12,99});
    states[60] = new State(new int[]{59,61});
    states[61] = new State(new int[]{125,62,150,64,151,65,152,70,153,75,154,84,157,89,143,50},new int[]{-9,63,-11,98,-12,99});
    states[62] = new State(-26);
    states[63] = new State(-30);
    states[64] = new State(-31);
    states[65] = new State(new int[]{61,66});
    states[66] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,67});
    states[67] = new State(new int[]{44,68,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[68] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,69});
    states[69] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-32});
    states[70] = new State(new int[]{61,71});
    states[71] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,72});
    states[72] = new State(new int[]{44,73,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[73] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,74});
    states[74] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-33});
    states[75] = new State(new int[]{61,76});
    states[76] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,77});
    states[77] = new State(new int[]{44,78,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[78] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,79});
    states[79] = new State(new int[]{44,80,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[80] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,81});
    states[81] = new State(new int[]{44,82,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[82] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,83});
    states[83] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-34});
    states[84] = new State(new int[]{61,85});
    states[85] = new State(new int[]{158,87,159,88},new int[]{-7,86});
    states[86] = new State(-35);
    states[87] = new State(-57);
    states[88] = new State(-58);
    states[89] = new State(new int[]{61,90});
    states[90] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,91});
    states[91] = new State(new int[]{44,92,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[92] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,93});
    states[93] = new State(new int[]{44,94,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[94] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,95});
    states[95] = new State(new int[]{44,96,124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30});
    states[96] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,97});
    states[97] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-36});
    states[98] = new State(-37);
    states[99] = new State(new int[]{61,100,209,102,210,104,211,106,212,108,59,-19});
    states[100] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,101});
    states[101] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-20});
    states[102] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,103});
    states[103] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-21});
    states[104] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,105});
    states[105] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-22});
    states[106] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,107});
    states[107] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-23});
    states[108] = new State(new int[]{146,32,147,33,143,34,45,35,126,37,40,39},new int[]{-5,109});
    states[109] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,59,-24});
    states[110] = new State(-29);
    states[111] = new State(-38);
    states[112] = new State(new int[]{124,10,38,12,94,14,43,16,45,18,140,20,141,22,213,24,42,26,47,28,37,30,44,-39,41,-39});
    states[113] = new State(new int[]{123,114});
    states[114] = new State(new int[]{150,64,151,65,152,70,153,75,154,84,157,89,143,50},new int[]{-10,115,-9,110,-11,98,-12,99});
    states[115] = new State(new int[]{59,116});
    states[116] = new State(new int[]{125,117,150,64,151,65,152,70,153,75,154,84,157,89,143,50},new int[]{-9,63,-11,98,-12,99});
    states[117] = new State(-27);
    states[118] = new State(new int[]{61,119});
    states[119] = new State(new int[]{158,87,159,88},new int[]{-7,120});
    states[120] = new State(new int[]{59,121});
    states[121] = new State(-7);
    states[122] = new State(new int[]{61,123});
    states[123] = new State(new int[]{144,130},new int[]{-6,124});
    states[124] = new State(new int[]{59,125,43,126,46,128});
    states[125] = new State(-8);
    states[126] = new State(new int[]{144,130},new int[]{-6,127});
    states[127] = new State(-60);
    states[128] = new State(new int[]{144,130},new int[]{-6,129});
    states[129] = new State(-61);
    states[130] = new State(-59);
    states[131] = new State(new int[]{61,132});
    states[132] = new State(new int[]{158,87,159,88},new int[]{-7,133});
    states[133] = new State(new int[]{59,134});
    states[134] = new State(-9);
    states[135] = new State(new int[]{61,136});
    states[136] = new State(new int[]{161,139,162,140,163,141,164,142,165,143,166,144,167,145,168,146,169,147,170,148,171,149,172,150,173,151,174,152,175,153,176,154,177,155,178,156,179,157,180,158,181,159,182,160,183,161,184,162,185,163,186,164,187,165,188,166,189,167,190,168,191,169,192,170,193,171,194,172,195,173,196,174,197,175,198,176,199,177,200,178,201,179,202,180,203,181},new int[]{-13,137});
    states[137] = new State(new int[]{59,138});
    states[138] = new State(-10);
    states[139] = new State(-62);
    states[140] = new State(-63);
    states[141] = new State(-64);
    states[142] = new State(-65);
    states[143] = new State(-66);
    states[144] = new State(-67);
    states[145] = new State(-68);
    states[146] = new State(-69);
    states[147] = new State(-70);
    states[148] = new State(-71);
    states[149] = new State(-72);
    states[150] = new State(-73);
    states[151] = new State(-74);
    states[152] = new State(-75);
    states[153] = new State(-76);
    states[154] = new State(-77);
    states[155] = new State(-78);
    states[156] = new State(-79);
    states[157] = new State(-80);
    states[158] = new State(-81);
    states[159] = new State(-82);
    states[160] = new State(-83);
    states[161] = new State(-84);
    states[162] = new State(-85);
    states[163] = new State(-86);
    states[164] = new State(-87);
    states[165] = new State(-88);
    states[166] = new State(-89);
    states[167] = new State(-90);
    states[168] = new State(-91);
    states[169] = new State(-92);
    states[170] = new State(-93);
    states[171] = new State(-94);
    states[172] = new State(-95);
    states[173] = new State(-96);
    states[174] = new State(-97);
    states[175] = new State(-98);
    states[176] = new State(-99);
    states[177] = new State(-100);
    states[178] = new State(-101);
    states[179] = new State(-102);
    states[180] = new State(-103);
    states[181] = new State(-104);
    states[182] = new State(new int[]{61,183});
    states[183] = new State(new int[]{205,186,206,187,207,188},new int[]{-14,184});
    states[184] = new State(new int[]{59,185});
    states[185] = new State(-11);
    states[186] = new State(-105);
    states[187] = new State(-106);
    states[188] = new State(-107);
    states[189] = new State(new int[]{144,190});
    states[190] = new State(new int[]{59,191});
    states[191] = new State(-12);
    states[192] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-16, new int[]{-15,129});
    rules[2] = new Rule(-15, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{-1});
    rules[4] = new Rule(-2, new int[]{-2,-1});
    rules[5] = new Rule(-1, new int[]{-4,59});
    rules[6] = new Rule(-1, new int[]{-3,59});
    rules[7] = new Rule(-1, new int[]{155,61,-7,59});
    rules[8] = new Rule(-1, new int[]{156,61,-6,59});
    rules[9] = new Rule(-1, new int[]{154,61,-7,59});
    rules[10] = new Rule(-1, new int[]{160,61,-13,59});
    rules[11] = new Rule(-1, new int[]{204,61,-14,59});
    rules[12] = new Rule(-1, new int[]{208,144,59});
    rules[13] = new Rule(-4, new int[]{-12});
    rules[14] = new Rule(-4, new int[]{-12,61,-5});
    rules[15] = new Rule(-4, new int[]{-12,209,-5});
    rules[16] = new Rule(-4, new int[]{-12,210,-5});
    rules[17] = new Rule(-4, new int[]{-12,211,-5});
    rules[18] = new Rule(-4, new int[]{-12,212,-5});
    rules[19] = new Rule(-11, new int[]{-12});
    rules[20] = new Rule(-11, new int[]{-12,61,-5});
    rules[21] = new Rule(-11, new int[]{-12,209,-5});
    rules[22] = new Rule(-11, new int[]{-12,210,-5});
    rules[23] = new Rule(-11, new int[]{-12,211,-5});
    rules[24] = new Rule(-11, new int[]{-12,212,-5});
    rules[25] = new Rule(-12, new int[]{143});
    rules[26] = new Rule(-3, new int[]{145,40,-8,44,-8,41,123,-10,59,125});
    rules[27] = new Rule(-3, new int[]{145,40,-8,41,123,-10,59,125});
    rules[28] = new Rule(-3, new int[]{145,40,-8,44,-8,41});
    rules[29] = new Rule(-10, new int[]{-9});
    rules[30] = new Rule(-10, new int[]{-10,59,-9});
    rules[31] = new Rule(-9, new int[]{150});
    rules[32] = new Rule(-9, new int[]{151,61,-5,44,-5});
    rules[33] = new Rule(-9, new int[]{152,61,-5,44,-5});
    rules[34] = new Rule(-9, new int[]{153,61,-5,44,-5,44,-5,44,-5});
    rules[35] = new Rule(-9, new int[]{154,61,-7});
    rules[36] = new Rule(-9, new int[]{157,61,-5,44,-5,44,-5,44,-5});
    rules[37] = new Rule(-9, new int[]{-11});
    rules[38] = new Rule(-8, new int[]{144});
    rules[39] = new Rule(-8, new int[]{-5});
    rules[40] = new Rule(-5, new int[]{146});
    rules[41] = new Rule(-5, new int[]{147});
    rules[42] = new Rule(-5, new int[]{143});
    rules[43] = new Rule(-5, new int[]{-5,124,-5});
    rules[44] = new Rule(-5, new int[]{-5,38,-5});
    rules[45] = new Rule(-5, new int[]{-5,94,-5});
    rules[46] = new Rule(-5, new int[]{-5,43,-5});
    rules[47] = new Rule(-5, new int[]{-5,45,-5});
    rules[48] = new Rule(-5, new int[]{-5,140,-5});
    rules[49] = new Rule(-5, new int[]{-5,141,-5});
    rules[50] = new Rule(-5, new int[]{-5,213,-5});
    rules[51] = new Rule(-5, new int[]{-5,42,-5});
    rules[52] = new Rule(-5, new int[]{-5,47,-5});
    rules[53] = new Rule(-5, new int[]{-5,37,-5});
    rules[54] = new Rule(-5, new int[]{45,-5});
    rules[55] = new Rule(-5, new int[]{126,-5});
    rules[56] = new Rule(-5, new int[]{40,-5,41});
    rules[57] = new Rule(-7, new int[]{158});
    rules[58] = new Rule(-7, new int[]{159});
    rules[59] = new Rule(-6, new int[]{144});
    rules[60] = new Rule(-6, new int[]{-6,43,-6});
    rules[61] = new Rule(-6, new int[]{-6,46,-6});
    rules[62] = new Rule(-13, new int[]{161});
    rules[63] = new Rule(-13, new int[]{162});
    rules[64] = new Rule(-13, new int[]{163});
    rules[65] = new Rule(-13, new int[]{164});
    rules[66] = new Rule(-13, new int[]{165});
    rules[67] = new Rule(-13, new int[]{166});
    rules[68] = new Rule(-13, new int[]{167});
    rules[69] = new Rule(-13, new int[]{168});
    rules[70] = new Rule(-13, new int[]{169});
    rules[71] = new Rule(-13, new int[]{170});
    rules[72] = new Rule(-13, new int[]{171});
    rules[73] = new Rule(-13, new int[]{172});
    rules[74] = new Rule(-13, new int[]{173});
    rules[75] = new Rule(-13, new int[]{174});
    rules[76] = new Rule(-13, new int[]{175});
    rules[77] = new Rule(-13, new int[]{176});
    rules[78] = new Rule(-13, new int[]{177});
    rules[79] = new Rule(-13, new int[]{178});
    rules[80] = new Rule(-13, new int[]{179});
    rules[81] = new Rule(-13, new int[]{180});
    rules[82] = new Rule(-13, new int[]{181});
    rules[83] = new Rule(-13, new int[]{182});
    rules[84] = new Rule(-13, new int[]{183});
    rules[85] = new Rule(-13, new int[]{184});
    rules[86] = new Rule(-13, new int[]{185});
    rules[87] = new Rule(-13, new int[]{186});
    rules[88] = new Rule(-13, new int[]{187});
    rules[89] = new Rule(-13, new int[]{188});
    rules[90] = new Rule(-13, new int[]{189});
    rules[91] = new Rule(-13, new int[]{190});
    rules[92] = new Rule(-13, new int[]{191});
    rules[93] = new Rule(-13, new int[]{192});
    rules[94] = new Rule(-13, new int[]{193});
    rules[95] = new Rule(-13, new int[]{194});
    rules[96] = new Rule(-13, new int[]{195});
    rules[97] = new Rule(-13, new int[]{196});
    rules[98] = new Rule(-13, new int[]{197});
    rules[99] = new Rule(-13, new int[]{198});
    rules[100] = new Rule(-13, new int[]{199});
    rules[101] = new Rule(-13, new int[]{200});
    rules[102] = new Rule(-13, new int[]{201});
    rules[103] = new Rule(-13, new int[]{202});
    rules[104] = new Rule(-13, new int[]{203});
    rules[105] = new Rule(-14, new int[]{205});
    rules[106] = new Rule(-14, new int[]{206});
    rules[107] = new Rule(-14, new int[]{207});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // top -> statement_list
#line 123 "CTexParser.y"
                     {	topPart = ValueStack[ValueStack.Depth-1].part;	}
#line default
        break;
      case 3: // statement_list -> statement
#line 126 "CTexParser.y"
                {	CurrentSemanticValue.part = ValueStack[ValueStack.Depth-1].part;	}
#line default
        break;
      case 4: // statement_list -> statement_list, statement
#line 127 "CTexParser.y"
                            {	CurrentSemanticValue.part = ValueStack[ValueStack.Depth-2].part;CurrentSemanticValue.part.next = ValueStack[ValueStack.Depth-1].part;	}
#line default
        break;
      case 5: // statement -> substitute, ';'
#line 131 "CTexParser.y"
                    {	CurrentSemanticValue.part = ValueStack[ValueStack.Depth-2].part;	}
#line default
        break;
      case 6: // statement -> partdef, ';'
#line 132 "CTexParser.y"
                  {	CurrentSemanticValue.part = ValueStack[ValueStack.Depth-2].part;	}
#line default
        break;
      case 7: // statement -> RESOURCE, '=', onoff, ';'
#line 133 "CTexParser.y"
                           {	CurrentSemanticValue.part = new CTexParserPart();isResource = (ValueStack[ValueStack.Depth-2].boolean == 0)? false:true;	}
#line default
        break;
      case 8: // statement -> SHADER, '=', strexp, ';'
#line 134 "CTexParser.y"
                          {	CurrentSemanticValue.part = new CTexParserPart();shader = ValueStack[ValueStack.Depth-2].str;	}
#line default
        break;
      case 9: // statement -> DITHER, '=', onoff, ';'
#line 135 "CTexParser.y"
                         {	CurrentSemanticValue.part = new CTexParserPart();isDither = (ValueStack[ValueStack.Depth-2].boolean == 0)? false:true;	}
#line default
        break;
      case 10: // statement -> FORMAT, '=', format, ';'
#line 136 "CTexParser.y"
                          {	CurrentSemanticValue.part = new CTexParserPart();format = ValueStack[ValueStack.Depth-2].format;	}
#line default
        break;
      case 11: // statement -> FILTER, '=', filter, ';'
#line 137 "CTexParser.y"
                          {	CurrentSemanticValue.part = new CTexParserPart();filter = ValueStack[ValueStack.Depth-2].filter;	}
#line default
        break;
      case 12: // statement -> IMPORT, LIT_STRING, ';'
#line 138 "CTexParser.y"
                          {	CurrentSemanticValue.part = new CTexParserPart();m_lstImportPath.Add(ValueStack[ValueStack.Depth-2].str);	}
#line default
        break;
      case 13: // substitute -> variable
#line 141 "CTexParser.y"
          {
		registVariable(ValueStack[ValueStack.Depth-1].str,0);
		CurrentSemanticValue.part = new CTexParserPart();
	}
#line default
        break;
      case 14: // substitute -> variable, '=', expression
#line 145 "CTexParser.y"
                          {
		registVariable(ValueStack[ValueStack.Depth-3].str,ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.part = new CTexParserPart();
	}
#line default
        break;
      case 15: // substitute -> variable, SUBSTITUTE_ADD, expression
#line 149 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue + ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.part = new CTexParserPart();
	}
#line default
        break;
      case 16: // substitute -> variable, SUBSTITUTE_SUB, expression
#line 155 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue - ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.part = new CTexParserPart();
	}
#line default
        break;
      case 17: // substitute -> variable, SUBSTITUTE_MUL, expression
#line 161 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue * ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.part = new CTexParserPart();
	}
#line default
        break;
      case 18: // substitute -> variable, SUBSTITUTE_DIV, expression
#line 167 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue / ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.part = new CTexParserPart();
	}
#line default
        break;
      case 19: // substitute_in_part -> variable
#line 175 "CTexParser.y"
          {
		registVariable(ValueStack[ValueStack.Depth-1].str,0);
		CurrentSemanticValue.prop = new CTexParserProperty();
	}
#line default
        break;
      case 20: // substitute_in_part -> variable, '=', expression
#line 179 "CTexParser.y"
                          {
		registVariable(ValueStack[ValueStack.Depth-3].str,ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CTexParserProperty();
	}
#line default
        break;
      case 21: // substitute_in_part -> variable, SUBSTITUTE_ADD, expression
#line 183 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue + ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CTexParserProperty();
	}
#line default
        break;
      case 22: // substitute_in_part -> variable, SUBSTITUTE_SUB, expression
#line 189 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue - ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CTexParserProperty();
	}
#line default
        break;
      case 23: // substitute_in_part -> variable, SUBSTITUTE_MUL, expression
#line 195 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue * ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CTexParserProperty();
	}
#line default
        break;
      case 24: // substitute_in_part -> variable, SUBSTITUTE_DIV, expression
#line 201 "CTexParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue / ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CTexParserProperty();
	}
#line default
        break;
      case 25: // variable -> VARIABLE
#line 209 "CTexParser.y"
               {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 26: // partdef -> PART_DEF, '(', id, ',', id, ')', '{', property_list, ';', '}'
#line 213 "CTexParser.y"
                                                        {	CurrentSemanticValue.part = new CTexParserPart(ValueStack[ValueStack.Depth-8].uvalue,ValueStack[ValueStack.Depth-6].uvalue,ValueStack[ValueStack.Depth-3].prop);	}
#line default
        break;
      case 27: // partdef -> PART_DEF, '(', id, ')', '{', property_list, ';', '}'
#line 214 "CTexParser.y"
                                                   {	CurrentSemanticValue.part = new CTexParserPart(ValueStack[ValueStack.Depth-6].uvalue,ValueStack[ValueStack.Depth-3].prop);	}
#line default
        break;
      case 28: // partdef -> PART_DEF, '(', id, ',', id, ')'
#line 215 "CTexParser.y"
                                    {	CurrentSemanticValue.part = new CTexParserPart(ValueStack[ValueStack.Depth-4].uvalue,ValueStack[ValueStack.Depth-2].uvalue,null);	}
#line default
        break;
      case 29: // property_list -> property
#line 219 "CTexParser.y"
                 {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-1].prop;	}
#line default
        break;
      case 30: // property_list -> property_list, ';', property
#line 220 "CTexParser.y"
                              {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-3].prop;CurrentSemanticValue.prop.next = ValueStack[ValueStack.Depth-1].prop;	}
#line default
        break;
      case 31: // property -> NODIVIDE
#line 224 "CTexParser.y"
                 {	CurrentSemanticValue.prop = new CTexParserProperty(e_TexProperty.NODIVIDE,Vector2.zero);	}
#line default
        break;
      case 32: // property -> DIVIDE3H, '=', expression, ',', expression
#line 225 "CTexParser.y"
                                         {	CurrentSemanticValue.prop = new CTexParserProperty(e_TexProperty.DIVIDE3H,new Vector2((float) ValueStack[ValueStack.Depth-3].value,(float) ValueStack[ValueStack.Depth-1].value));	}
#line default
        break;
      case 33: // property -> DIVIDE3V, '=', expression, ',', expression
#line 226 "CTexParser.y"
                                         {	CurrentSemanticValue.prop = new CTexParserProperty(e_TexProperty.DIVIDE3V,new Vector2((float) ValueStack[ValueStack.Depth-3].value,(float) ValueStack[ValueStack.Depth-1].value));	}
#line default
        break;
      case 34: // property -> DIVIDE9, '=', expression, ',', expression, ',', expression, ',', 
               //             expression
#line 227 "CTexParser.y"
                                                                      {	CurrentSemanticValue.prop = new CTexParserProperty(e_TexProperty.DIVIDE9,new Vector4((float) ValueStack[ValueStack.Depth-7].value,(float) ValueStack[ValueStack.Depth-5].value,(float) ValueStack[ValueStack.Depth-3].value,(float) ValueStack[ValueStack.Depth-1].value));	}
#line default
        break;
      case 35: // property -> DITHER, '=', onoff
#line 228 "CTexParser.y"
                        {	CurrentSemanticValue.prop = new CTexParserProperty(e_TexProperty.DITHER,ValueStack[ValueStack.Depth-1].boolean);	}
#line default
        break;
      case 36: // property -> COLOR, '=', expression, ',', expression, ',', expression, ',', 
               //             expression
#line 229 "CTexParser.y"
                                                                      {	CurrentSemanticValue.prop = new CTexParserProperty(e_TexProperty.COLOR,new Vector4((float) ValueStack[ValueStack.Depth-7].value * 128f,(float) ValueStack[ValueStack.Depth-5].value * 128f,(float) ValueStack[ValueStack.Depth-3].value * 128f,(float) ValueStack[ValueStack.Depth-1].value * 255f));	}
#line default
        break;
      case 37: // property -> substitute_in_part
#line 230 "CTexParser.y"
                          {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-1].prop;	}
#line default
        break;
      case 38: // id -> LIT_STRING
#line 234 "CTexParser.y"
                  {	if (!FiveCC.isFiveCC(ValueStack[ValueStack.Depth-1].str)) {
												string	err = "this string is not [five cc]:" + ValueStack[ValueStack.Depth-1].str;
												yyerror(err);
												YYError();
											}
											FiveCC	fiveCC = new FiveCC(ValueStack[ValueStack.Depth-1].str);
											CurrentSemanticValue.uvalue = fiveCC;
										}
#line default
        break;
      case 39: // id -> expression
#line 242 "CTexParser.y"
                   {	CurrentSemanticValue.uvalue = (uint) ValueStack[ValueStack.Depth-1].value;
										}
#line default
        break;
      case 40: // expression -> LIT_INTEGER
#line 250 "CTexParser.y"
                   {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 41: // expression -> LIT_FLOAT
#line 251 "CTexParser.y"
                  {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 42: // expression -> VARIABLE
#line 252 "CTexParser.y"
                 {	double	fValue;
											if (!getVariable(out fValue,ValueStack[ValueStack.Depth-1].str)) {	
												string	err = "can't find variable:" + ValueStack[ValueStack.Depth-1].str;
												yyerror(err);
												YYError();
											}
											CurrentSemanticValue.value = fValue;
										}
#line default
        break;
      case 43: // expression -> expression, '|', expression
#line 260 "CTexParser.y"
                              {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value | (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 44: // expression -> expression, '&', expression
#line 261 "CTexParser.y"
                              {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value & (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 45: // expression -> expression, '^', expression
#line 262 "CTexParser.y"
                              {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value ^ (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 46: // expression -> expression, '+', expression
#line 263 "CTexParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value + ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 47: // expression -> expression, '-', expression
#line 264 "CTexParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value - ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 48: // expression -> expression, SHIFT_LEFT, expression
#line 265 "CTexParser.y"
                                   {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value << (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 49: // expression -> expression, SHIFT_RIGHT, expression
#line 266 "CTexParser.y"
                                    {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value >> (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 50: // expression -> expression, POW, expression
#line 267 "CTexParser.y"
                              {	CurrentSemanticValue.value = Math.Pow(ValueStack[ValueStack.Depth-3].value,ValueStack[ValueStack.Depth-1].value);	}
#line default
        break;
      case 51: // expression -> expression, '*', expression
#line 268 "CTexParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value * ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 52: // expression -> expression, '/', expression
#line 269 "CTexParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value / ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 53: // expression -> expression, '%', expression
#line 270 "CTexParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value % ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 54: // expression -> '-', expression
#line 271 "CTexParser.y"
                             {	CurrentSemanticValue.value = -ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 55: // expression -> '~', expression
#line 272 "CTexParser.y"
                      {	CurrentSemanticValue.value = ~(int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 56: // expression -> '(', expression, ')'
#line 273 "CTexParser.y"
                         {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-2].value;	}
#line default
        break;
      case 57: // onoff -> ON
#line 276 "CTexParser.y"
            {	CurrentSemanticValue.boolean = 1;	}
#line default
        break;
      case 58: // onoff -> OFF
#line 277 "CTexParser.y"
             {	CurrentSemanticValue.boolean = 0;	}
#line default
        break;
      case 59: // strexp -> LIT_STRING
#line 280 "CTexParser.y"
                  {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 60: // strexp -> strexp, '+', strexp
#line 281 "CTexParser.y"
                        {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-3].str + ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 61: // strexp -> strexp, '.', strexp
#line 282 "CTexParser.y"
                        {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-3].str + ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 62: // format -> TEXTURE_FORMAT_ALPHA8
#line 286 "CTexParser.y"
                         {	CurrentSemanticValue.format = TextureFormat.Alpha8;	exportType = 0;	}
#line default
        break;
      case 63: // format -> TEXTURE_FORMAT_ARGB4444
#line 287 "CTexParser.y"
                           {	CurrentSemanticValue.format = TextureFormat.ARGB4444;exportType = 0;	}
#line default
        break;
      case 64: // format -> TEXTURE_FORMAT_RGB24
#line 288 "CTexParser.y"
                         {	CurrentSemanticValue.format = TextureFormat.RGB24;	exportType = 0;	}
#line default
        break;
      case 65: // format -> TEXTURE_FORMAT_RGBA32
#line 289 "CTexParser.y"
                          {	CurrentSemanticValue.format = TextureFormat.RGBA32;	exportType = 0;	}
#line default
        break;
      case 66: // format -> TEXTURE_FORMAT_ARGB32
#line 290 "CTexParser.y"
                          {	CurrentSemanticValue.format = TextureFormat.ARGB32;	exportType = 0;	}
#line default
        break;
      case 67: // format -> TEXTURE_FORMAT_RGB565
#line 291 "CTexParser.y"
                          {	CurrentSemanticValue.format = TextureFormat.RGB565;	exportType = 0;}
#line default
        break;
      case 68: // format -> TEXTURE_FORMAT_R16
#line 292 "CTexParser.y"
                        {	CurrentSemanticValue.format = TextureFormat.R16;		exportType = 0;	}
#line default
        break;
      case 69: // format -> TEXTURE_FORMAT_DXT1
#line 293 "CTexParser.y"
                        {	CurrentSemanticValue.format = TextureFormat.DXT1;	exportType = 0;	}
#line default
        break;
      case 70: // format -> TEXTURE_FORMAT_DXT5
#line 294 "CTexParser.y"
                        {	CurrentSemanticValue.format = TextureFormat.DXT5;	exportType = 0;	}
#line default
        break;
      case 71: // format -> TEXTURE_FORMAT_RGBA4444
#line 295 "CTexParser.y"
                           {	CurrentSemanticValue.format = TextureFormat.RGBA4444;exportType = 0;}
#line default
        break;
      case 72: // format -> TEXTURE_FORMAT_BGRA32
#line 296 "CTexParser.y"
                          {	CurrentSemanticValue.format = TextureFormat.BGRA32;	exportType = 0;	}
#line default
        break;
      case 73: // format -> TEXTURE_FORMAT_RHalf
#line 297 "CTexParser.y"
                         {	CurrentSemanticValue.format = TextureFormat.RHalf;	exportType = 0;	}
#line default
        break;
      case 74: // format -> TEXTURE_FORMAT_RGHal
#line 298 "CTexParser.y"
                         {	CurrentSemanticValue.format = TextureFormat.RGHalf;	exportType = 0;	}
#line default
        break;
      case 75: // format -> TEXTURE_FORMAT_RGBAHalf
#line 299 "CTexParser.y"
                           {	CurrentSemanticValue.format = TextureFormat.RGBAHalf;exportType = 0;	}
#line default
        break;
      case 76: // format -> TEXTURE_FORMAT_RFloat
#line 300 "CTexParser.y"
                          {	CurrentSemanticValue.format = TextureFormat.RFloat;	exportType = 0;}
#line default
        break;
      case 77: // format -> TEXTURE_FORMAT_RGFloat
#line 301 "CTexParser.y"
                           {	CurrentSemanticValue.format = TextureFormat.RGFloat;	exportType = 0;}
#line default
        break;
      case 78: // format -> TEXTURE_FORMAT_RGBAFloat
#line 302 "CTexParser.y"
                            {	CurrentSemanticValue.format = TextureFormat.RGBAFloat;	exportType = 0;}
#line default
        break;
      case 79: // format -> TEXTURE_FORMAT_YUY2
#line 303 "CTexParser.y"
                        {	CurrentSemanticValue.format = TextureFormat.YUY2;	exportType = 0;}
#line default
        break;
      case 80: // format -> TEXTURE_FORMAT_PVRTC_RGB2
#line 304 "CTexParser.y"
                             {	CurrentSemanticValue.format = TextureFormat.PVRTC_RGB2;	exportType = 0;	}
#line default
        break;
      case 81: // format -> TEXTURE_FORMAT_PVRTC_RGBA2
#line 305 "CTexParser.y"
                              {	CurrentSemanticValue.format = TextureFormat.PVRTC_RGBA2;	exportType = 0;	}
#line default
        break;
      case 82: // format -> TEXTURE_FORMAT_PVRTC_RGB4
#line 306 "CTexParser.y"
                             {	CurrentSemanticValue.format = TextureFormat.PVRTC_RGB4;	exportType = 0;	}
#line default
        break;
      case 83: // format -> TEXTURE_FORMAT_PVRTC_RGBA4
#line 307 "CTexParser.y"
                              {	CurrentSemanticValue.format = TextureFormat.PVRTC_RGBA4;	exportType = 0;	}
#line default
        break;
      case 84: // format -> TEXTURE_FORMAT_ETC_RGB4
#line 308 "CTexParser.y"
                           {	CurrentSemanticValue.format = TextureFormat.ETC_RGB4;	exportType = 0;	}
#line default
        break;
      case 85: // format -> TEXTURE_FORMAT_EAC_R
#line 309 "CTexParser.y"
                         {	CurrentSemanticValue.format = TextureFormat.EAC_R;		exportType = 0;	}
#line default
        break;
      case 86: // format -> TEXTURE_FORMAT_EAC_R_SIGNED
#line 310 "CTexParser.y"
                              {	CurrentSemanticValue.format = TextureFormat.EAC_R_SIGNED;exportType = 0;	}
#line default
        break;
      case 87: // format -> TEXTURE_FORMAT_EAC_RG
#line 311 "CTexParser.y"
                          {	CurrentSemanticValue.format = TextureFormat.EAC_RG;	exportType = 0;	}
#line default
        break;
      case 88: // format -> TEXTURE_FORMAT_EAC_RG_SIGNED
#line 312 "CTexParser.y"
                               {	CurrentSemanticValue.format = TextureFormat.EAC_RG_SIGNED;	exportType = 0;	}
#line default
        break;
      case 89: // format -> TEXTURE_FORMAT_ETC2_RGB
#line 313 "CTexParser.y"
                           {	CurrentSemanticValue.format = TextureFormat.ETC2_RGB;	exportType = 0;	}
#line default
        break;
      case 90: // format -> TEXTURE_FORMAT_ETC2_RGBA1
#line 314 "CTexParser.y"
                             {	CurrentSemanticValue.format = TextureFormat.ETC2_RGBA1;	exportType = 0;	}
#line default
        break;
      case 91: // format -> TEXTURE_FORMAT_ETC2_RGBA8
#line 315 "CTexParser.y"
                             {	CurrentSemanticValue.format = TextureFormat.ETC2_RGBA8;	exportType = 0;	}
#line default
        break;
      case 92: // format -> TEXTURE_FORMAT_ASTC_RGB_4x4
#line 316 "CTexParser.y"
                              {	CurrentSemanticValue.format = TextureFormat.ASTC_RGB_4x4;	exportType = 0;	}
#line default
        break;
      case 93: // format -> TEXTURE_FORMAT_ASTC_RGB_5x5
#line 317 "CTexParser.y"
                              {	CurrentSemanticValue.format = TextureFormat.ASTC_RGB_5x5;	exportType = 0;	}
#line default
        break;
      case 94: // format -> TEXTURE_FORMAT_ASTC_RGB_6x6
#line 318 "CTexParser.y"
                              {	CurrentSemanticValue.format = TextureFormat.ASTC_RGB_6x6;	exportType = 0;	}
#line default
        break;
      case 95: // format -> TEXTURE_FORMAT_ASTC_RGB_8x8
#line 319 "CTexParser.y"
                              {	CurrentSemanticValue.format = TextureFormat.ASTC_RGB_8x8;	exportType = 0;	}
#line default
        break;
      case 96: // format -> TEXTURE_FORMAT_ASTC_RGB_10x10
#line 320 "CTexParser.y"
                                {	CurrentSemanticValue.format = TextureFormat.ASTC_RGB_10x10;	exportType = 0;	}
#line default
        break;
      case 97: // format -> TEXTURE_FORMAT_ASTC_RGB_12x12
#line 321 "CTexParser.y"
                                {	CurrentSemanticValue.format = TextureFormat.ASTC_RGB_12x12;	exportType = 0;	}
#line default
        break;
      case 98: // format -> TEXTURE_FORMAT_ASTC_RGBA_4x4
#line 322 "CTexParser.y"
                               {	CurrentSemanticValue.format = TextureFormat.ASTC_RGBA_4x4;	exportType = 0;	}
#line default
        break;
      case 99: // format -> TEXTURE_FORMAT_ASTC_RGBA_6x6
#line 323 "CTexParser.y"
                               {	CurrentSemanticValue.format = TextureFormat.ASTC_RGBA_6x6;	exportType = 0;	}
#line default
        break;
      case 100: // format -> TEXTURE_FORMAT_ASTC_RGBA_8x8
#line 324 "CTexParser.y"
                               {	CurrentSemanticValue.format = TextureFormat.ASTC_RGBA_8x8;	exportType = 0;	}
#line default
        break;
      case 101: // format -> TEXTURE_FORMAT_ASTC_RGBA_10x10
#line 325 "CTexParser.y"
                                 {	CurrentSemanticValue.format = TextureFormat.ASTC_RGBA_10x10;	exportType = 0;		}
#line default
        break;
      case 102: // format -> TEXTURE_FORMAT_ASTC_RGBA_12x12
#line 326 "CTexParser.y"
                                 {	CurrentSemanticValue.format = TextureFormat.ASTC_RGBA_12x12;	exportType = 0;		}
#line default
        break;
      case 103: // format -> TEXTURE_FORMAT_PNG
#line 327 "CTexParser.y"
                        {	CurrentSemanticValue.format = TextureFormat.ARGB32;	exportType = 1;	}
#line default
        break;
      case 104: // format -> TEXTURE_FORMAT_JPG
#line 328 "CTexParser.y"
                        {	CurrentSemanticValue.format = TextureFormat.RGB24;	exportType = 2;}
#line default
        break;
      case 105: // filter -> FILTER_POINT
#line 331 "CTexParser.y"
                  {	CurrentSemanticValue.filter =  FilterMode.Point;	}
#line default
        break;
      case 106: // filter -> FILTER_BILINEAR
#line 332 "CTexParser.y"
                     {	CurrentSemanticValue.filter = FilterMode.Bilinear;	}
#line default
        break;
      case 107: // filter -> FILTER_TRILINEAR
#line 333 "CTexParser.y"
                      {	CurrentSemanticValue.filter = FilterMode.Trilinear;	}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 338 "CTexParser.y"
/* error routin */
void yyerror(string err)
{
	UnityEngine.Debug.LogError(err);
}
CTexParserPart			m_cTopPart = null;
bool					m_bResource = false;
bool					m_bDither = false;
string					m_sShader = null;
TextureFormat			m_eTextureFromat = TextureFormat.RGBA4444;
FilterMode				m_eFilterMode = FilterMode.Bilinear;
List<string>			m_lstImportPath = new List<string>();
int						m_exportType = 0;	//0:raw 1:png 2:jpg
Dictionary<string,double>	m_dicVariable = new Dictionary<string,double>();
//==============================================================================================
/*!
	@brief	Constructor
	@note	
*/
//==============================================================================================
Parser(Scanner scanner) : base(scanner) {
}
//==============================================================================================
/*!
	@brief	registVariable
	@note	
*/
//==============================================================================================
void registVariable(string sVariable,double fValue)
{
	m_dicVariable[sVariable] = fValue;
}
//==============================================================================================
/*!
	@brief	getVariable
	@note	
*/
//==============================================================================================
bool getVariable(out double rValue,string sVariable)
{
	if (m_dicVariable.TryGetValue(sVariable,out rValue)) {
		return true;
	}
	rValue = 0;
	return false;
}

public Parser() : base(null) { }
//==============================================================================================
/*!
	@brief	compile
	@note	
*/
//==============================================================================================
static public Parser compile(string file) {
	//--------------------------------
	// gcc preprocessor
	string output;
	if (CParserHelper.preprocess(out output,KsSoftConfig.Preprocessor,KsSoftConfig.TextureResourcePreprocessorArguments,file,true) != 0) {
		return null;
	}
	// change code UTF8 from UTF16
	UTF8Encoding utf8enc = new UTF8Encoding();
	byte[] aOutput = utf8enc.GetBytes(output);
	
	// create memory stream
	MemoryStream ms = new MemoryStream();
	ms.Write(aOutput,0,aOutput.Length);
	ms.Seek(0,SeekOrigin.Begin);
	
	// start parse
	Parser parser = new Parser();
	Scanner scanner = new Scanner(ms);
	parser.Scanner = scanner;
	if (!parser.Parse()) {
		UnityEngine.Debug.LogError("texture data compile error:" + scanner.sourcecode() + "(" + (scanner.line() - 1) + ")");
		ms.Close();
		return null;
	}
	return parser;
}
public CTexParserPart topPart {
	get {
		return m_cTopPart;
	}
	set {
		m_cTopPart = value;
	}
}
public bool isResource {
	get {
		return m_bResource;
	}
	set {
		m_bResource = value;
	}
}
public bool isDither {
	get {
		return m_bDither;
	}
	set {
		m_bDither = value;
	}
}
public string shader {
	get {
		return m_sShader;
	}
	set {
		m_sShader = value;
	}
}
public TextureFormat format {
	get {
		return m_eTextureFromat;
	}
	set {
		m_eTextureFromat = value;
	}
}
public FilterMode filter {
	get {
		return m_eFilterMode;
	}
	set {
		m_eFilterMode = value;
	}
}
public int exportType {
	get {
		return m_exportType;
	}
	set {
		m_exportType = value;
	}
}
public string[] importpath {
	get {
		return m_lstImportPath.ToArray();
	}
}
#line default
}
}
