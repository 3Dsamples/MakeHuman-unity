// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  SEIKICHI-PC
// DateTime: 2019/07/05 9:14:38
// UserName: Seikichi
// Input file <CWinParser.y - 2019/07/05 9:14:19>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using UnityEditor;
using UnityEngine;
using System.IO;
using System.Diagnostics;
using KS;

namespace CWinParser
{
internal enum Tokens {error=128,EOF=129,TK_ERROR=130,PRAGMA=131,OR=132,
    AND=133,EQ=134,GT=135,GE=136,LT=137,LE=138,
    NE=139,NOT=140,SHIFT_LEFT=141,SHIFT_RIGHT=142,IDENTIFIER=143,VARIABLE=144,
    LIT_STRING=145,WINDOW_DEF=146,CTRL_DEF=147,LIT_INTEGER=148,CONSTANT=149,LIT_FLOAT=150,
    PROPERTY_ID=151,PROPERTY_SCREEN=152,PROPERTY_CAPTION=153,PROPERTY_CAPTION_OFFSET=154,PROPERTY_CAPTION_COLOR=155,PROPERTY_POSITION=156,
    PROPERTY_POSITION2=157,PROPERTY_CLOSE_POSITION=158,PROPERTY_CLOSE_SCALE=159,PROPERTY_SIZE=160,PROPERTY_SAFEAREA=161,PROPERTY_STYLE=162,
    PROPERTY_TEX_ID0=163,PROPERTY_TEX_ID1=164,PROPERTY_TEX_ID2=165,PROPERTY_TEX_ID3=166,PROPERTY_TEX_ID4=167,PROPERTY_TEX_ID5=168,
    PROPERTY_TEX_ID6=169,PROPERTY_TEX_ID7=170,PROPERTY_TEXTURE_OFFSET0=171,PROPERTY_TEXTURE_OFFSET1=172,PROPERTY_TEXTURE_OFFSET2=173,PROPERTY_TEXTURE_OFFSET3=174,
    PROPERTY_TEXTURE_OFFSET4=175,PROPERTY_TEXTURE_OFFSET5=176,PROPERTY_TEXTURE_OFFSET6=177,PROPERTY_TEXTURE_OFFSET7=178,PROPERTY_TEXTURE_SIZE1=179,PROPERTY_TEXTURE_SIZE2=180,
    PROPERTY_TEXTURE_SIZE3=181,PROPERTY_TEXTURE_SIZE4=182,PROPERTY_TEXTURE_SIZE5=183,PROPERTY_TEXTURE_SIZE6=184,PROPERTY_TEXTURE_SIZE7=185,PROPERTY_TEXTURE_ZOFFSET=186,
    PROPERTY_COLOR0=187,PROPERTY_COLOR1=188,PROPERTY_COLOR2=189,PROPERTY_COLOR3=190,PROPERTY_COLOR4=191,PROPERTY_COLOR5=192,
    PROPERTY_COLOR6=193,PROPERTY_COLOR7=194,PROPERTY_SE_ID=195,PROPERTY_COLUMN=196,PROPERTY_EDIT=197,PROPERTY_RELATION_ID=198,
    PROPERTY_HELP_ID=199,PROPERTY_TOOLTIP=200,PROPERTY_FONT_KIND=201,PROPERTY_GROUP=202,PROPERTY_CONTENTS=203,PROPERTY_SLIDEMAX=204,
    PROPERTY_PRIORITY=205,PROPERTY_CONTENTS_SIZE=206,PROPERTY_LINE_SPACE=207,PROPERTY_LINE_FEED_OFFSET=208,PROPERTY_RESOURCE=209,PROPERTY_PATH=210,
    PROPERTY_BASECLASS=211,WINCTRL_CLOSEBUTTON=212,WINCTRL_WINDOWCAPTION=213,WINCTRL_TEXT=214,WINCTRL_RICHTEXT=215,WINCTRL_EDITBOX=216,
    WINCTRL_TEXTBOX=217,WINCTRL_RICHTEXTBOX=218,WINCTRL_BUTTON=219,WINCTRL_CHECKBOX=220,WINCTRL_COMBOBOX=221,WINCTRL_RADIO=222,
    WINCTRL_TEXTURE=223,WINCTRL_LINE=224,WINCTRL_RENDER=225,WINCTRL_CANVAS=226,WINCTRL_ICON=227,WINCTRL_RENDERICON=228,
    WINCTRL_RECASTICON=229,WINCTRL_METER=230,WINCTRL_SCROLLBAR=231,WINCTRL_LISTBOX=232,WINCTRL_LISTBOXEX=233,WINCTRL_CONTAINER=234,
    WINCTRL_SLIDEBAR=235,WINCTRL_FRAME=236,WINCTRL_LABEL=237,WINCTRL_BAR=238,WINCTRL_WINDOWMINIMIZATION=239,WINCTRL_HELPBUTTON=240,
    WINCTRL_LOG=241,WINCTRL_LOGTEXT=242,WINDOW_STYLE_ANCHOR_DEFAULT=243,WINDOW_STYLE_ANCHOR_LEFTTOP=244,WINDOW_STYLE_ANCHOR_LEFT=245,WINDOW_STYLE_ANCHOR_LEFTBOTTOM=246,
    WINDOW_STYLE_ANCHOR_TOP=247,WINDOW_STYLE_ANCHOR_CENTER=248,WINDOW_STYLE_ANCHOR_BOTTOM=249,WINDOW_STYLE_ANCHOR_RIGHTTOP=250,WINDOW_STYLE_ANCHOR_RIGHT=251,WINDOW_STYLE_ANCHOR_RIGHTBOTTOM=252,
    WINDOW_STYLE_TOP=253,WINDOW_STYLE_POPUP=254,WINDOW_STYLE_TOPMOST=255,WINDOW_STYLE_NOECLIPSE=256,WINDOW_STYLE_NOCLOSE=257,WINDOW_STYLE_NOMINIMIZATION=258,
    WINDOW_STYLE_NOHELP=259,WINDOW_STYLE_NOTITLEBAR=260,WINDOW_STYLE_NOFRAME=261,WINDOW_STYLE_DISABLE=262,WINDOW_STYLE_DRAG=263,WINDOW_STYLE_NOACTIVE=264,
    WINDOW_STYLE_HIDE=265,WINDOW_STYLE_NOBRINGTOTOP=266,WINDOW_STYLE_OPENBOTTOM=267,ANCHOR_DEFAULT=268,ANCHOR_LEFTTOP=269,ANCHOR_LEFT=270,
    ANCHOR_LEFTBOTTOM=271,ANCHOR_TOP=272,ANCHOR_CENTER=273,ANCHOR_BOTTOM=274,ANCHOR_RIGHTTOP=275,ANCHOR_RIGHT=276,
    ANCHOR_RIGHTBOTTOM=277,TOP=278,POPUP=279,TOPMOST=280,NOECLIPSE=281,NOCLOSE=282,
    NOMINIMIZATION=283,NOHELP=284,NOTITLEBAR=285,NOFRAME=286,DISABLE=287,DRAG=288,
    NOACTIVE=289,HIDE=290,NOBRINGTOTOP=291,OPENBOTTOM=292,BASE_DEFAULT=293,BASE_LEFTTOP=294,
    BASE_LEFT=295,BASE_LEFTBOTTOM=296,BASE_TOP=297,BASE_CENTER=298,BASE_BOTTOM=299,BASE_RIGHTTOP=300,
    BASE_RIGHT=301,BASE_RIGHTBOTTOM=302,TEXT_NONE=303,TEXT_LEFT=304,TEXT_CENTER=305,TEXT_RIGHT=306,
    TEXT_NORMAL=307,TEXT_BOLD=308,TEXT_DENT=309,TEXT_SHADOW=310,TEXT_NOHYPHENATION=311,TEXT_AUTOSCALE=312,
    NOHIT=313,HIT=314,EDIT_BLIND=315,EDIT_TYPE_ALL=316,EDIT_TYPE_ASCIICAPABLE=317,EDIT_TYPE_NUMBERANDPUNCTUATION=318,
    EDIT_TYPE_URL=319,EDIT_TYPE_NUMBERPAD=320,EDIT_TYPE_PHONEPAD=321,EDIT_TYPE_NAMEPHONEPAD=322,EDIT_TYPE_EMAILADDRESS=323,NOBOUNCES=324,
    ITEM_STACK_V=325,ITEM_STACK_H=326,SCROLL_LOOP=327,SCROLL_UNLOCK=328,SCROLL_LOCK=329,SCROLLBAR_DISPLAY_NORMAL=330,
    SCROLLBAR_DISPLAY_SCROLLABLE=331,SCROLLBAR_DISPLAY_ALWAYS=332,NONE=333,SUBSTITUTE_ADD=334,SUBSTITUTE_SUB=335,SUBSTITUTE_MUL=336,
    SUBSTITUTE_DIV=337,POW=338,INCREMENT=339,DECREMENT=340,NEG=341,PLUS=342,
    EXPR=343,RATIO=344};

internal partial struct ValueType
#line 18 "CWinParser.y"
       {
	public char					c;
	public string				str;
	public double				value;
	public uint					uvalue;
	public Vector2				v2;
	public Vector3				v3;
	public Vector4				v4;
	public Vector3[]			pairratio;
	public CWinParserProperty	prop;
	public CWinParserCtrl		ctrl;
	public CWinNumberList		numberlist;
	public e_WinStyle			winstyle;
	public Tokens[]				ctrlstyles;
	public Tokens				ctrlstyle;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from CWinParser.y - 2019/07/05 9:14:19
#line 9 "CWinParser.y"
//==============================================================================================
/*!WinRC Parser.
	@file  CWinParser.y
*/
//==============================================================================================
#line default
  // End verbatim content from CWinParser.y - 2019/07/05 9:14:19

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[308];
  private static State[] states = new State[652];
  private static string[] nonTerms = new string[] {
      "statement", "statement_list", "ctrldef", "substitute", "expression", "strexp", 
      "ratio", "pairratio", "fpairratio", "partid", "five_cc", "window_property", 
      "ctrl_property", "texid", "window_property_list", "ctrl_property_list", 
      "substitute_in_ctrl", "color", "variable", "identifier", "ctrl_type", "ctrlid", 
      "ctrlid_list", "windowstyle", "windowstyles", "ctrlstyles", "ctrlstyle", 
      "window", "$accept", "windowdef", };

  static Parser() {
    states[0] = new State(new int[]{146,430,144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390,129,-2},new int[]{-28,1,-30,3,-2,649,-1,391,-4,6,-19,8,-3,54,-21,56});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390,129,-5},new int[]{-2,4,-1,391,-4,6,-19,8,-3,54,-21,56});
    states[4] = new State(new int[]{144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390,129,-3},new int[]{-1,5,-4,6,-19,8,-3,54,-21,56});
    states[5] = new State(-46);
    states[6] = new State(new int[]{59,7});
    states[7] = new State(-47);
    states[8] = new State(new int[]{61,9,334,46,335,48,336,50,337,52,59,-52});
    states[9] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,10,-19,35});
    states[10] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-53});
    states[11] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,12,-19,35});
    states[12] = new State(new int[]{124,-176,38,13,94,15,43,-176,45,-176,141,-176,142,-176,338,-176,42,-176,47,-176,37,-176,59,-176,41,-176,44,-176,125,-176});
    states[13] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,14,-19,35});
    states[14] = new State(-177);
    states[15] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,16,-19,35});
    states[16] = new State(new int[]{124,-178,38,13,94,-178,43,-178,45,-178,141,-178,142,-178,338,-178,42,-178,47,-178,37,-178,59,-178,41,-178,44,-178,125,-178});
    states[17] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,18,-19,35});
    states[18] = new State(new int[]{124,11,38,13,94,15,43,-179,45,-179,141,21,142,23,338,25,42,27,47,29,37,31,59,-179,41,-179,44,-179,125,-179});
    states[19] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,20,-19,35});
    states[20] = new State(new int[]{124,11,38,13,94,15,43,-180,45,-180,141,21,142,23,338,25,42,27,47,29,37,31,59,-180,41,-180,44,-180,125,-180});
    states[21] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,22,-19,35});
    states[22] = new State(new int[]{124,11,38,13,94,15,43,-181,45,-181,141,-181,142,-181,338,25,42,27,47,29,37,31,59,-181,41,-181,44,-181,125,-181});
    states[23] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,24,-19,35});
    states[24] = new State(new int[]{124,11,38,13,94,15,43,-182,45,-182,141,-182,142,-182,338,25,42,27,47,29,37,31,59,-182,41,-182,44,-182,125,-182});
    states[25] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,26,-19,35});
    states[26] = new State(new int[]{124,11,38,13,94,15,43,-183,45,-183,141,-183,142,-183,338,-183,42,-183,47,-183,37,-183,59,-183,41,-183,44,-183,125,-183});
    states[27] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,28,-19,35});
    states[28] = new State(new int[]{124,11,38,13,94,15,43,-184,45,-184,141,-184,142,-184,338,-184,42,-184,47,-184,37,-184,59,-184,41,-184,44,-184,125,-184});
    states[29] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,30,-19,35});
    states[30] = new State(new int[]{124,11,38,13,94,15,43,-185,45,-185,141,-185,142,-185,338,-185,42,-185,47,-185,37,-185,59,-185,41,-185,44,-185,125,-185});
    states[31] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,32,-19,35});
    states[32] = new State(new int[]{124,11,38,13,94,15,43,-186,45,-186,141,-186,142,-186,338,-186,42,-186,47,-186,37,-186,59,-186,41,-186,44,-186,125,-186});
    states[33] = new State(-173);
    states[34] = new State(-174);
    states[35] = new State(-175);
    states[36] = new State(-65);
    states[37] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,38,-19,35});
    states[38] = new State(-187);
    states[39] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,40,-19,35});
    states[40] = new State(-188);
    states[41] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,42,-19,35});
    states[42] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-189,41,-189,44,-189,125,-189});
    states[43] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,44,-19,35});
    states[44] = new State(new int[]{41,45,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[45] = new State(-190);
    states[46] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,47,-19,35});
    states[47] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-54});
    states[48] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,49,-19,35});
    states[49] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-55});
    states[50] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,51,-19,35});
    states[51] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-56});
    states[52] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,53,-19,35});
    states[53] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-57});
    states[54] = new State(new int[]{59,55,146,-49,144,-49,212,-49,213,-49,214,-49,215,-49,241,-49,242,-49,216,-49,217,-49,218,-49,219,-49,222,-49,220,-49,221,-49,223,-49,225,-49,226,-49,227,-49,228,-49,229,-49,230,-49,231,-49,232,-49,233,-49,234,-49,235,-49,236,-49,237,-49,238,-49,239,-49,240,-49,224,-49,131,-49,129,-49,125,-49});
    states[55] = new State(-48);
    states[56] = new State(new int[]{40,57});
    states[57] = new State(new int[]{143,351},new int[]{-20,58});
    states[58] = new State(new int[]{41,59});
    states[59] = new State(new int[]{123,60});
    states[60] = new State(new int[]{151,64,153,68,154,79,155,101,156,112,157,116,160,120,187,124,188,128,189,132,190,136,191,140,192,144,193,148,194,152,162,156,163,220,164,231,165,235,166,239,167,243,168,247,169,251,170,255,171,259,172,263,173,267,174,271,175,275,176,279,177,283,178,287,179,291,180,295,181,299,182,303,183,307,184,311,185,315,197,319,198,325,199,329,200,333,201,337,202,341,203,384,204,392,205,396,206,400,207,404,208,408,195,412,144,36},new int[]{-16,61,-13,429,-17,416,-19,418});
    states[61] = new State(new int[]{125,62,151,64,153,68,154,79,155,101,156,112,157,116,160,120,187,124,188,128,189,132,190,136,191,140,192,144,193,148,194,152,162,156,163,220,164,231,165,235,166,239,167,243,168,247,169,251,170,255,171,259,172,263,173,267,174,271,175,275,176,279,177,283,178,287,179,291,180,295,181,299,182,303,183,307,184,311,185,315,197,319,198,325,199,329,200,333,201,337,202,341,203,384,204,392,205,396,206,400,207,404,208,408,195,412,144,36},new int[]{-13,63,-17,416,-19,418});
    states[62] = new State(-51);
    states[63] = new State(-98);
    states[64] = new State(new int[]{61,65});
    states[65] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,66,-19,35});
    states[66] = new State(new int[]{59,67,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[67] = new State(-99);
    states[68] = new State(new int[]{61,69});
    states[69] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,78},new int[]{-5,70,-6,72,-19,35});
    states[70] = new State(new int[]{59,71,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[71] = new State(-100);
    states[72] = new State(new int[]{59,73,43,74,46,76});
    states[73] = new State(-101);
    states[74] = new State(new int[]{145,78},new int[]{-6,75});
    states[75] = new State(-192);
    states[76] = new State(new int[]{145,78},new int[]{-6,77});
    states[77] = new State(-193);
    states[78] = new State(-191);
    states[79] = new State(new int[]{61,80});
    states[80] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,81,-9,83,-7,84,-5,91,-19,35});
    states[81] = new State(new int[]{59,82});
    states[82] = new State(-102);
    states[83] = new State(-165);
    states[84] = new State(new int[]{44,85,43,87,45,89,59,-167});
    states[85] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,59,-166},new int[]{-7,86,-5,91,-19,35});
    states[86] = new State(new int[]{43,87,45,89,59,-169,44,-169,41,-169});
    states[87] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-7,88,-5,91,-19,35});
    states[88] = new State(-163);
    states[89] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-7,90,-5,91,-19,35});
    states[90] = new State(-164);
    states[91] = new State(new int[]{124,11,38,13,94,15,43,-160,45,-160,141,21,142,23,338,25,42,27,47,29,37,31,44,-160,59,-160,41,-160});
    states[92] = new State(new int[]{143,95,148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,93,-19,35});
    states[93] = new State(new int[]{125,94,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[94] = new State(-161);
    states[95] = new State(new int[]{58,96});
    states[96] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,97,-19,35});
    states[97] = new State(new int[]{125,98,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[98] = new State(-162);
    states[99] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-7,100,-5,91,-19,35});
    states[100] = new State(new int[]{43,87,45,89,59,-168});
    states[101] = new State(new int[]{61,102});
    states[102] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,103,-5,105,-19,35});
    states[103] = new State(new int[]{59,104});
    states[104] = new State(-103);
    states[105] = new State(new int[]{44,106,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-195});
    states[106] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,107,-19,35});
    states[107] = new State(new int[]{44,108,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[108] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,109,-19,35});
    states[109] = new State(new int[]{44,110,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[110] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,111,-19,35});
    states[111] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-194});
    states[112] = new State(new int[]{61,113});
    states[113] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,114,-9,83,-7,84,-5,91,-19,35});
    states[114] = new State(new int[]{59,115});
    states[115] = new State(-104);
    states[116] = new State(new int[]{61,117});
    states[117] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,118,-9,83,-7,84,-5,91,-19,35});
    states[118] = new State(new int[]{59,119});
    states[119] = new State(-105);
    states[120] = new State(new int[]{61,121});
    states[121] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,122,-9,83,-7,84,-5,91,-19,35});
    states[122] = new State(new int[]{59,123});
    states[123] = new State(-106);
    states[124] = new State(new int[]{61,125});
    states[125] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,126,-5,105,-19,35});
    states[126] = new State(new int[]{59,127});
    states[127] = new State(-107);
    states[128] = new State(new int[]{61,129});
    states[129] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,130,-5,105,-19,35});
    states[130] = new State(new int[]{59,131});
    states[131] = new State(-108);
    states[132] = new State(new int[]{61,133});
    states[133] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,134,-5,105,-19,35});
    states[134] = new State(new int[]{59,135});
    states[135] = new State(-109);
    states[136] = new State(new int[]{61,137});
    states[137] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,138,-5,105,-19,35});
    states[138] = new State(new int[]{59,139});
    states[139] = new State(-110);
    states[140] = new State(new int[]{61,141});
    states[141] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,142,-5,105,-19,35});
    states[142] = new State(new int[]{59,143});
    states[143] = new State(-111);
    states[144] = new State(new int[]{61,145});
    states[145] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,146,-5,105,-19,35});
    states[146] = new State(new int[]{59,147});
    states[147] = new State(-112);
    states[148] = new State(new int[]{61,149});
    states[149] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,150,-5,105,-19,35});
    states[150] = new State(new int[]{59,151});
    states[151] = new State(-113);
    states[152] = new State(new int[]{61,153});
    states[153] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,154,-5,105,-19,35});
    states[154] = new State(new int[]{59,155});
    states[155] = new State(-114);
    states[156] = new State(new int[]{61,157});
    states[157] = new State(new int[]{268,167,269,168,270,169,271,170,272,171,273,172,274,173,275,174,276,175,277,176,293,177,294,178,295,179,296,180,297,181,298,182,299,183,300,184,301,185,302,186,303,187,304,188,305,189,306,190,307,191,308,192,309,193,310,194,311,195,312,196,290,197,288,198,287,199,313,200,314,201,315,202,316,203,317,204,318,205,319,206,320,207,321,208,322,209,323,210,324,211,325,212,326,213,327,214,328,215,329,216,330,217,331,218,332,219},new int[]{-26,158,-27,166});
    states[158] = new State(new int[]{59,159,124,160,44,162,43,164});
    states[159] = new State(-115);
    states[160] = new State(new int[]{268,167,269,168,270,169,271,170,272,171,273,172,274,173,275,174,276,175,277,176,293,177,294,178,295,179,296,180,297,181,298,182,299,183,300,184,301,185,302,186,303,187,304,188,305,189,306,190,307,191,308,192,309,193,310,194,311,195,312,196,290,197,288,198,287,199,313,200,314,201,315,202,316,203,317,204,318,205,319,206,320,207,321,208,322,209,323,210,324,211,325,212,326,213,327,214,328,215,329,216,330,217,331,218,332,219},new int[]{-26,161,-27,166});
    states[161] = new State(new int[]{124,-252,44,162,43,-252,59,-252});
    states[162] = new State(new int[]{268,167,269,168,270,169,271,170,272,171,273,172,274,173,275,174,276,175,277,176,293,177,294,178,295,179,296,180,297,181,298,182,299,183,300,184,301,185,302,186,303,187,304,188,305,189,306,190,307,191,308,192,309,193,310,194,311,195,312,196,290,197,288,198,287,199,313,200,314,201,315,202,316,203,317,204,318,205,319,206,320,207,321,208,322,209,323,210,324,211,325,212,326,213,327,214,328,215,329,216,330,217,331,218,332,219},new int[]{-26,163,-27,166});
    states[163] = new State(-253);
    states[164] = new State(new int[]{268,167,269,168,270,169,271,170,272,171,273,172,274,173,275,174,276,175,277,176,293,177,294,178,295,179,296,180,297,181,298,182,299,183,300,184,301,185,302,186,303,187,304,188,305,189,306,190,307,191,308,192,309,193,310,194,311,195,312,196,290,197,288,198,287,199,313,200,314,201,315,202,316,203,317,204,318,205,319,206,320,207,321,208,322,209,323,210,324,211,325,212,326,213,327,214,328,215,329,216,330,217,331,218,332,219},new int[]{-26,165,-27,166});
    states[165] = new State(new int[]{124,160,44,162,43,-254,59,-254});
    states[166] = new State(-251);
    states[167] = new State(-255);
    states[168] = new State(-256);
    states[169] = new State(-257);
    states[170] = new State(-258);
    states[171] = new State(-259);
    states[172] = new State(-260);
    states[173] = new State(-261);
    states[174] = new State(-262);
    states[175] = new State(-263);
    states[176] = new State(-264);
    states[177] = new State(-265);
    states[178] = new State(-266);
    states[179] = new State(-267);
    states[180] = new State(-268);
    states[181] = new State(-269);
    states[182] = new State(-270);
    states[183] = new State(-271);
    states[184] = new State(-272);
    states[185] = new State(-273);
    states[186] = new State(-274);
    states[187] = new State(-275);
    states[188] = new State(-276);
    states[189] = new State(-277);
    states[190] = new State(-278);
    states[191] = new State(-279);
    states[192] = new State(-280);
    states[193] = new State(-281);
    states[194] = new State(-282);
    states[195] = new State(-283);
    states[196] = new State(-284);
    states[197] = new State(-285);
    states[198] = new State(-286);
    states[199] = new State(-287);
    states[200] = new State(-288);
    states[201] = new State(-289);
    states[202] = new State(-290);
    states[203] = new State(-291);
    states[204] = new State(-292);
    states[205] = new State(-293);
    states[206] = new State(-294);
    states[207] = new State(-295);
    states[208] = new State(-296);
    states[209] = new State(-297);
    states[210] = new State(-298);
    states[211] = new State(-299);
    states[212] = new State(-300);
    states[213] = new State(-301);
    states[214] = new State(-302);
    states[215] = new State(-303);
    states[216] = new State(-304);
    states[217] = new State(-305);
    states[218] = new State(-306);
    states[219] = new State(-307);
    states[220] = new State(new int[]{61,221});
    states[221] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,222,-5,224,-19,35,-10,230,-11,227});
    states[222] = new State(new int[]{59,223});
    states[223] = new State(-116);
    states[224] = new State(new int[]{44,225,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-156});
    states[225] = new State(new int[]{145,228,333,229},new int[]{-10,226,-11,227});
    states[226] = new State(-154);
    states[227] = new State(-157);
    states[228] = new State(-159);
    states[229] = new State(-158);
    states[230] = new State(-155);
    states[231] = new State(new int[]{61,232});
    states[232] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,233,-5,224,-19,35,-10,230,-11,227});
    states[233] = new State(new int[]{59,234});
    states[234] = new State(-117);
    states[235] = new State(new int[]{61,236});
    states[236] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,237,-5,224,-19,35,-10,230,-11,227});
    states[237] = new State(new int[]{59,238});
    states[238] = new State(-118);
    states[239] = new State(new int[]{61,240});
    states[240] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,241,-5,224,-19,35,-10,230,-11,227});
    states[241] = new State(new int[]{59,242});
    states[242] = new State(-119);
    states[243] = new State(new int[]{61,244});
    states[244] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,245,-5,224,-19,35,-10,230,-11,227});
    states[245] = new State(new int[]{59,246});
    states[246] = new State(-120);
    states[247] = new State(new int[]{61,248});
    states[248] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,249,-5,224,-19,35,-10,230,-11,227});
    states[249] = new State(new int[]{59,250});
    states[250] = new State(-121);
    states[251] = new State(new int[]{61,252});
    states[252] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,253,-5,224,-19,35,-10,230,-11,227});
    states[253] = new State(new int[]{59,254});
    states[254] = new State(-122);
    states[255] = new State(new int[]{61,256});
    states[256] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,257,-5,224,-19,35,-10,230,-11,227});
    states[257] = new State(new int[]{59,258});
    states[258] = new State(-123);
    states[259] = new State(new int[]{61,260});
    states[260] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,261,-9,83,-7,84,-5,91,-19,35});
    states[261] = new State(new int[]{59,262});
    states[262] = new State(-124);
    states[263] = new State(new int[]{61,264});
    states[264] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,265,-9,83,-7,84,-5,91,-19,35});
    states[265] = new State(new int[]{59,266});
    states[266] = new State(-125);
    states[267] = new State(new int[]{61,268});
    states[268] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,269,-9,83,-7,84,-5,91,-19,35});
    states[269] = new State(new int[]{59,270});
    states[270] = new State(-126);
    states[271] = new State(new int[]{61,272});
    states[272] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,273,-9,83,-7,84,-5,91,-19,35});
    states[273] = new State(new int[]{59,274});
    states[274] = new State(-127);
    states[275] = new State(new int[]{61,276});
    states[276] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,277,-9,83,-7,84,-5,91,-19,35});
    states[277] = new State(new int[]{59,278});
    states[278] = new State(-128);
    states[279] = new State(new int[]{61,280});
    states[280] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,281,-9,83,-7,84,-5,91,-19,35});
    states[281] = new State(new int[]{59,282});
    states[282] = new State(-129);
    states[283] = new State(new int[]{61,284});
    states[284] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,285,-9,83,-7,84,-5,91,-19,35});
    states[285] = new State(new int[]{59,286});
    states[286] = new State(-130);
    states[287] = new State(new int[]{61,288});
    states[288] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,289,-9,83,-7,84,-5,91,-19,35});
    states[289] = new State(new int[]{59,290});
    states[290] = new State(-131);
    states[291] = new State(new int[]{61,292});
    states[292] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,293,-9,83,-7,84,-5,91,-19,35});
    states[293] = new State(new int[]{59,294});
    states[294] = new State(-132);
    states[295] = new State(new int[]{61,296});
    states[296] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,297,-9,83,-7,84,-5,91,-19,35});
    states[297] = new State(new int[]{59,298});
    states[298] = new State(-133);
    states[299] = new State(new int[]{61,300});
    states[300] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,301,-9,83,-7,84,-5,91,-19,35});
    states[301] = new State(new int[]{59,302});
    states[302] = new State(-134);
    states[303] = new State(new int[]{61,304});
    states[304] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,305,-9,83,-7,84,-5,91,-19,35});
    states[305] = new State(new int[]{59,306});
    states[306] = new State(-135);
    states[307] = new State(new int[]{61,308});
    states[308] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,309,-9,83,-7,84,-5,91,-19,35});
    states[309] = new State(new int[]{59,310});
    states[310] = new State(-136);
    states[311] = new State(new int[]{61,312});
    states[312] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,313,-9,83,-7,84,-5,91,-19,35});
    states[313] = new State(new int[]{59,314});
    states[314] = new State(-137);
    states[315] = new State(new int[]{61,316});
    states[316] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,317,-9,83,-7,84,-5,91,-19,35});
    states[317] = new State(new int[]{59,318});
    states[318] = new State(-138);
    states[319] = new State(new int[]{61,320});
    states[320] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,321,-19,35});
    states[321] = new State(new int[]{44,322,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[322] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,323,-19,35});
    states[323] = new State(new int[]{59,324,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[324] = new State(-139);
    states[325] = new State(new int[]{61,326});
    states[326] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,327,-19,35});
    states[327] = new State(new int[]{59,328,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[328] = new State(-140);
    states[329] = new State(new int[]{61,330});
    states[330] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,331,-19,35});
    states[331] = new State(new int[]{59,332,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[332] = new State(-141);
    states[333] = new State(new int[]{61,334});
    states[334] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,335,-19,35});
    states[335] = new State(new int[]{59,336,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[336] = new State(-142);
    states[337] = new State(new int[]{61,338});
    states[338] = new State(new int[]{145,228},new int[]{-11,339});
    states[339] = new State(new int[]{59,340});
    states[340] = new State(-143);
    states[341] = new State(new int[]{61,342});
    states[342] = new State(new int[]{212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382},new int[]{-23,343,-22,383,-21,347});
    states[343] = new State(new int[]{59,344,44,345});
    states[344] = new State(-144);
    states[345] = new State(new int[]{212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382},new int[]{-22,346,-21,347});
    states[346] = new State(-172);
    states[347] = new State(new int[]{40,348});
    states[348] = new State(new int[]{143,351},new int[]{-20,349});
    states[349] = new State(new int[]{41,350});
    states[350] = new State(-170);
    states[351] = new State(-64);
    states[352] = new State(-66);
    states[353] = new State(-67);
    states[354] = new State(-68);
    states[355] = new State(-69);
    states[356] = new State(-70);
    states[357] = new State(-71);
    states[358] = new State(-72);
    states[359] = new State(-73);
    states[360] = new State(-74);
    states[361] = new State(-75);
    states[362] = new State(-76);
    states[363] = new State(-77);
    states[364] = new State(-78);
    states[365] = new State(-79);
    states[366] = new State(-80);
    states[367] = new State(-81);
    states[368] = new State(-82);
    states[369] = new State(-83);
    states[370] = new State(-84);
    states[371] = new State(-85);
    states[372] = new State(-86);
    states[373] = new State(-87);
    states[374] = new State(-88);
    states[375] = new State(-89);
    states[376] = new State(-90);
    states[377] = new State(-91);
    states[378] = new State(-92);
    states[379] = new State(-93);
    states[380] = new State(-94);
    states[381] = new State(-95);
    states[382] = new State(-96);
    states[383] = new State(-171);
    states[384] = new State(new int[]{61,385});
    states[385] = new State(new int[]{123,386});
    states[386] = new State(new int[]{144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390},new int[]{-2,387,-1,391,-4,6,-19,8,-3,54,-21,56});
    states[387] = new State(new int[]{125,388,144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390},new int[]{-1,5,-4,6,-19,8,-3,54,-21,56});
    states[388] = new State(new int[]{59,389,125,-146,151,-146,153,-146,154,-146,155,-146,156,-146,157,-146,160,-146,187,-146,188,-146,189,-146,190,-146,191,-146,192,-146,193,-146,194,-146,162,-146,163,-146,164,-146,165,-146,166,-146,167,-146,168,-146,169,-146,170,-146,171,-146,172,-146,173,-146,174,-146,175,-146,176,-146,177,-146,178,-146,179,-146,180,-146,181,-146,182,-146,183,-146,184,-146,185,-146,197,-146,198,-146,199,-146,200,-146,201,-146,202,-146,203,-146,204,-146,205,-146,206,-146,207,-146,208,-146,195,-146,144,-146});
    states[389] = new State(-145);
    states[390] = new State(-50);
    states[391] = new State(-45);
    states[392] = new State(new int[]{61,393});
    states[393] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,394,-19,35});
    states[394] = new State(new int[]{59,395,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[395] = new State(-147);
    states[396] = new State(new int[]{61,397});
    states[397] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,398,-19,35});
    states[398] = new State(new int[]{59,399,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[399] = new State(-148);
    states[400] = new State(new int[]{61,401});
    states[401] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,402,-9,83,-7,84,-5,91,-19,35});
    states[402] = new State(new int[]{59,403});
    states[403] = new State(-149);
    states[404] = new State(new int[]{61,405});
    states[405] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,406,-19,35});
    states[406] = new State(new int[]{59,407,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[407] = new State(-150);
    states[408] = new State(new int[]{61,409});
    states[409] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,410,-19,35});
    states[410] = new State(new int[]{59,411,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[411] = new State(-151);
    states[412] = new State(new int[]{61,413});
    states[413] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,414,-19,35});
    states[414] = new State(new int[]{59,415,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[415] = new State(-152);
    states[416] = new State(new int[]{59,417});
    states[417] = new State(-153);
    states[418] = new State(new int[]{61,419,334,421,335,423,336,425,337,427,59,-58});
    states[419] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,420,-19,35});
    states[420] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-59});
    states[421] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,422,-19,35});
    states[422] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-60});
    states[423] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,424,-19,35});
    states[424] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-61});
    states[425] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,426,-19,35});
    states[426] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-62});
    states[427] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,428,-19,35});
    states[428] = new State(new int[]{124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31,59,-63});
    states[429] = new State(-97);
    states[430] = new State(new int[]{40,431});
    states[431] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,432,-19,35});
    states[432] = new State(new int[]{41,433,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[433] = new State(new int[]{123,434});
    states[434] = new State(new int[]{153,439,154,445,156,449,152,453,158,468,159,472,160,482,155,486,187,490,188,494,189,498,190,502,191,506,192,510,193,514,194,518,205,522,162,526,186,588,163,594,164,598,165,602,166,606,167,610,168,614,169,618,170,622,209,626,210,632,211,636,195,640,201,644},new int[]{-15,435,-12,648});
    states[435] = new State(new int[]{125,436,153,439,154,445,156,449,152,453,158,468,159,472,160,482,155,486,187,490,188,494,189,498,190,502,191,506,192,510,193,514,194,518,205,522,162,526,186,588,163,594,164,598,165,602,166,606,167,610,168,614,169,618,170,622,209,626,210,632,211,636,195,640,201,644},new int[]{-12,438});
    states[436] = new State(new int[]{59,437,144,-7,212,-7,213,-7,214,-7,215,-7,241,-7,242,-7,216,-7,217,-7,218,-7,219,-7,222,-7,220,-7,221,-7,223,-7,225,-7,226,-7,227,-7,228,-7,229,-7,230,-7,231,-7,232,-7,233,-7,234,-7,235,-7,236,-7,237,-7,238,-7,239,-7,240,-7,224,-7,131,-7,129,-7});
    states[437] = new State(-6);
    states[438] = new State(-9);
    states[439] = new State(new int[]{61,440});
    states[440] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,78},new int[]{-5,441,-6,443,-19,35});
    states[441] = new State(new int[]{59,442,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[442] = new State(-10);
    states[443] = new State(new int[]{59,444,43,74,46,76});
    states[444] = new State(-11);
    states[445] = new State(new int[]{61,446});
    states[446] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,447,-9,83,-7,84,-5,91,-19,35});
    states[447] = new State(new int[]{59,448});
    states[448] = new State(-12);
    states[449] = new State(new int[]{61,450});
    states[450] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,451,-9,83,-7,84,-5,91,-19,35});
    states[451] = new State(new int[]{59,452});
    states[452] = new State(-13);
    states[453] = new State(new int[]{61,454});
    states[454] = new State(new int[]{161,461,148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-9,455,-7,459,-5,91,-19,35});
    states[455] = new State(new int[]{44,456});
    states[456] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-9,457,-7,459,-5,91,-19,35});
    states[457] = new State(new int[]{59,458});
    states[458] = new State(-14);
    states[459] = new State(new int[]{44,460,43,87,45,89});
    states[460] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-7,86,-5,91,-19,35});
    states[461] = new State(new int[]{40,462});
    states[462] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-9,463,-7,459,-5,91,-19,35});
    states[463] = new State(new int[]{44,464});
    states[464] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92},new int[]{-9,465,-7,459,-5,91,-19,35});
    states[465] = new State(new int[]{41,466});
    states[466] = new State(new int[]{59,467});
    states[467] = new State(-15);
    states[468] = new State(new int[]{61,469});
    states[469] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,470,-9,83,-7,84,-5,91,-19,35});
    states[470] = new State(new int[]{59,471});
    states[471] = new State(-16);
    states[472] = new State(new int[]{61,473});
    states[473] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,474,-19,35});
    states[474] = new State(new int[]{44,475,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[475] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,476,-19,35});
    states[476] = new State(new int[]{44,477,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[477] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,478,-19,35});
    states[478] = new State(new int[]{44,479,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[479] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,480,-19,35});
    states[480] = new State(new int[]{59,481,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[481] = new State(-17);
    states[482] = new State(new int[]{61,483});
    states[483] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,123,92,44,99},new int[]{-8,484,-9,83,-7,84,-5,91,-19,35});
    states[484] = new State(new int[]{59,485});
    states[485] = new State(-18);
    states[486] = new State(new int[]{61,487});
    states[487] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,488,-5,105,-19,35});
    states[488] = new State(new int[]{59,489});
    states[489] = new State(-19);
    states[490] = new State(new int[]{61,491});
    states[491] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,492,-5,105,-19,35});
    states[492] = new State(new int[]{59,493});
    states[493] = new State(-20);
    states[494] = new State(new int[]{61,495});
    states[495] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,496,-5,105,-19,35});
    states[496] = new State(new int[]{59,497});
    states[497] = new State(-21);
    states[498] = new State(new int[]{61,499});
    states[499] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,500,-5,105,-19,35});
    states[500] = new State(new int[]{59,501});
    states[501] = new State(-22);
    states[502] = new State(new int[]{61,503});
    states[503] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,504,-5,105,-19,35});
    states[504] = new State(new int[]{59,505});
    states[505] = new State(-23);
    states[506] = new State(new int[]{61,507});
    states[507] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,508,-5,105,-19,35});
    states[508] = new State(new int[]{59,509});
    states[509] = new State(-24);
    states[510] = new State(new int[]{61,511});
    states[511] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,512,-5,105,-19,35});
    states[512] = new State(new int[]{59,513});
    states[513] = new State(-25);
    states[514] = new State(new int[]{61,515});
    states[515] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,516,-5,105,-19,35});
    states[516] = new State(new int[]{59,517});
    states[517] = new State(-26);
    states[518] = new State(new int[]{61,519});
    states[519] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-18,520,-5,105,-19,35});
    states[520] = new State(new int[]{59,521});
    states[521] = new State(-27);
    states[522] = new State(new int[]{61,523});
    states[523] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,524,-19,35});
    states[524] = new State(new int[]{59,525,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[525] = new State(-28);
    states[526] = new State(new int[]{61,527});
    states[527] = new State(new int[]{243,537,244,538,245,539,246,540,247,541,248,542,249,543,250,544,251,545,252,546,253,547,254,548,255,549,256,550,257,551,258,552,259,553,260,554,261,555,262,556,263,557,264,558,265,559,266,560,267,561,268,562,269,563,270,564,271,565,272,566,273,567,274,568,275,569,276,570,277,571,278,572,279,573,280,574,281,575,282,576,283,577,284,578,285,579,236,580,286,581,287,582,288,583,289,584,290,585,291,586,292,587},new int[]{-25,528,-24,536});
    states[528] = new State(new int[]{59,529,124,530,44,532,43,534});
    states[529] = new State(-29);
    states[530] = new State(new int[]{243,537,244,538,245,539,246,540,247,541,248,542,249,543,250,544,251,545,252,546,253,547,254,548,255,549,256,550,257,551,258,552,259,553,260,554,261,555,262,556,263,557,264,558,265,559,266,560,267,561,268,562,269,563,270,564,271,565,272,566,273,567,274,568,275,569,276,570,277,571,278,572,279,573,280,574,281,575,282,576,283,577,284,578,285,579,236,580,286,581,287,582,288,583,289,584,290,585,291,586,292,587},new int[]{-25,531,-24,536});
    states[531] = new State(new int[]{124,-197,44,532,43,-197,59,-197});
    states[532] = new State(new int[]{243,537,244,538,245,539,246,540,247,541,248,542,249,543,250,544,251,545,252,546,253,547,254,548,255,549,256,550,257,551,258,552,259,553,260,554,261,555,262,556,263,557,264,558,265,559,266,560,267,561,268,562,269,563,270,564,271,565,272,566,273,567,274,568,275,569,276,570,277,571,278,572,279,573,280,574,281,575,282,576,283,577,284,578,285,579,236,580,286,581,287,582,288,583,289,584,290,585,291,586,292,587},new int[]{-25,533,-24,536});
    states[533] = new State(-198);
    states[534] = new State(new int[]{243,537,244,538,245,539,246,540,247,541,248,542,249,543,250,544,251,545,252,546,253,547,254,548,255,549,256,550,257,551,258,552,259,553,260,554,261,555,262,556,263,557,264,558,265,559,266,560,267,561,268,562,269,563,270,564,271,565,272,566,273,567,274,568,275,569,276,570,277,571,278,572,279,573,280,574,281,575,282,576,283,577,284,578,285,579,236,580,286,581,287,582,288,583,289,584,290,585,291,586,292,587},new int[]{-25,535,-24,536});
    states[535] = new State(new int[]{124,530,44,532,43,-199,59,-199});
    states[536] = new State(-196);
    states[537] = new State(-200);
    states[538] = new State(-201);
    states[539] = new State(-202);
    states[540] = new State(-203);
    states[541] = new State(-204);
    states[542] = new State(-205);
    states[543] = new State(-206);
    states[544] = new State(-207);
    states[545] = new State(-208);
    states[546] = new State(-209);
    states[547] = new State(-210);
    states[548] = new State(-211);
    states[549] = new State(-212);
    states[550] = new State(-213);
    states[551] = new State(-214);
    states[552] = new State(-215);
    states[553] = new State(-216);
    states[554] = new State(-217);
    states[555] = new State(-218);
    states[556] = new State(-219);
    states[557] = new State(-220);
    states[558] = new State(-221);
    states[559] = new State(-222);
    states[560] = new State(-223);
    states[561] = new State(-224);
    states[562] = new State(-225);
    states[563] = new State(-226);
    states[564] = new State(-227);
    states[565] = new State(-228);
    states[566] = new State(-229);
    states[567] = new State(-230);
    states[568] = new State(-231);
    states[569] = new State(-232);
    states[570] = new State(-233);
    states[571] = new State(-234);
    states[572] = new State(-235);
    states[573] = new State(-236);
    states[574] = new State(-237);
    states[575] = new State(-238);
    states[576] = new State(-239);
    states[577] = new State(-240);
    states[578] = new State(-241);
    states[579] = new State(-242);
    states[580] = new State(-243);
    states[581] = new State(-244);
    states[582] = new State(-245);
    states[583] = new State(-246);
    states[584] = new State(-247);
    states[585] = new State(-248);
    states[586] = new State(-249);
    states[587] = new State(-250);
    states[588] = new State(new int[]{61,589});
    states[589] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,590,-19,35});
    states[590] = new State(new int[]{44,591,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[591] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,592,-19,35});
    states[592] = new State(new int[]{59,593,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[593] = new State(-30);
    states[594] = new State(new int[]{61,595});
    states[595] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,596,-5,224,-19,35,-10,230,-11,227});
    states[596] = new State(new int[]{59,597});
    states[597] = new State(-31);
    states[598] = new State(new int[]{61,599});
    states[599] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,600,-5,224,-19,35,-10,230,-11,227});
    states[600] = new State(new int[]{59,601});
    states[601] = new State(-32);
    states[602] = new State(new int[]{61,603});
    states[603] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,604,-5,224,-19,35,-10,230,-11,227});
    states[604] = new State(new int[]{59,605});
    states[605] = new State(-33);
    states[606] = new State(new int[]{61,607});
    states[607] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,608,-5,224,-19,35,-10,230,-11,227});
    states[608] = new State(new int[]{59,609});
    states[609] = new State(-34);
    states[610] = new State(new int[]{61,611});
    states[611] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,612,-5,224,-19,35,-10,230,-11,227});
    states[612] = new State(new int[]{59,613});
    states[613] = new State(-35);
    states[614] = new State(new int[]{61,615});
    states[615] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,616,-5,224,-19,35,-10,230,-11,227});
    states[616] = new State(new int[]{59,617});
    states[617] = new State(-36);
    states[618] = new State(new int[]{61,619});
    states[619] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,620,-5,224,-19,35,-10,230,-11,227});
    states[620] = new State(new int[]{59,621});
    states[621] = new State(-37);
    states[622] = new State(new int[]{61,623});
    states[623] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43,145,228,333,229},new int[]{-14,624,-5,224,-19,35,-10,230,-11,227});
    states[624] = new State(new int[]{59,625});
    states[625] = new State(-38);
    states[626] = new State(new int[]{61,627});
    states[627] = new State(new int[]{145,78,148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-6,628,-5,630,-19,35});
    states[628] = new State(new int[]{59,629,43,74,46,76});
    states[629] = new State(-39);
    states[630] = new State(new int[]{59,631,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[631] = new State(-40);
    states[632] = new State(new int[]{61,633});
    states[633] = new State(new int[]{145,78},new int[]{-6,634});
    states[634] = new State(new int[]{59,635,43,74,46,76});
    states[635] = new State(-41);
    states[636] = new State(new int[]{61,637});
    states[637] = new State(new int[]{145,78},new int[]{-6,638});
    states[638] = new State(new int[]{59,639,43,74,46,76});
    states[639] = new State(-42);
    states[640] = new State(new int[]{61,641});
    states[641] = new State(new int[]{148,33,150,34,144,36,45,37,43,39,126,41,40,43},new int[]{-5,642,-19,35});
    states[642] = new State(new int[]{59,643,124,11,38,13,94,15,43,17,45,19,141,21,142,23,338,25,42,27,47,29,37,31});
    states[643] = new State(-43);
    states[644] = new State(new int[]{61,645});
    states[645] = new State(new int[]{145,228},new int[]{-11,646});
    states[646] = new State(new int[]{59,647});
    states[647] = new State(-44);
    states[648] = new State(-8);
    states[649] = new State(new int[]{146,430,144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390},new int[]{-30,650,-1,5,-4,6,-19,8,-3,54,-21,56});
    states[650] = new State(new int[]{144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390},new int[]{-2,651,-1,391,-4,6,-19,8,-3,54,-21,56});
    states[651] = new State(new int[]{144,36,212,352,213,353,214,354,215,355,241,356,242,357,216,358,217,359,218,360,219,361,222,362,220,363,221,364,223,365,225,366,226,367,227,368,228,369,229,370,230,371,231,372,232,373,233,374,234,375,235,376,236,377,237,378,238,379,239,380,240,381,224,382,131,390,129,-4},new int[]{-1,5,-4,6,-19,8,-3,54,-21,56});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-29, new int[]{-28,129});
    rules[2] = new Rule(-28, new int[]{});
    rules[3] = new Rule(-28, new int[]{-30,-2});
    rules[4] = new Rule(-28, new int[]{-2,-30,-2});
    rules[5] = new Rule(-28, new int[]{-30});
    rules[6] = new Rule(-30, new int[]{146,40,-5,41,123,-15,125,59});
    rules[7] = new Rule(-30, new int[]{146,40,-5,41,123,-15,125});
    rules[8] = new Rule(-15, new int[]{-12});
    rules[9] = new Rule(-15, new int[]{-15,-12});
    rules[10] = new Rule(-12, new int[]{153,61,-5,59});
    rules[11] = new Rule(-12, new int[]{153,61,-6,59});
    rules[12] = new Rule(-12, new int[]{154,61,-8,59});
    rules[13] = new Rule(-12, new int[]{156,61,-8,59});
    rules[14] = new Rule(-12, new int[]{152,61,-9,44,-9,59});
    rules[15] = new Rule(-12, new int[]{152,61,161,40,-9,44,-9,41,59});
    rules[16] = new Rule(-12, new int[]{158,61,-8,59});
    rules[17] = new Rule(-12, new int[]{159,61,-5,44,-5,44,-5,44,-5,59});
    rules[18] = new Rule(-12, new int[]{160,61,-8,59});
    rules[19] = new Rule(-12, new int[]{155,61,-18,59});
    rules[20] = new Rule(-12, new int[]{187,61,-18,59});
    rules[21] = new Rule(-12, new int[]{188,61,-18,59});
    rules[22] = new Rule(-12, new int[]{189,61,-18,59});
    rules[23] = new Rule(-12, new int[]{190,61,-18,59});
    rules[24] = new Rule(-12, new int[]{191,61,-18,59});
    rules[25] = new Rule(-12, new int[]{192,61,-18,59});
    rules[26] = new Rule(-12, new int[]{193,61,-18,59});
    rules[27] = new Rule(-12, new int[]{194,61,-18,59});
    rules[28] = new Rule(-12, new int[]{205,61,-5,59});
    rules[29] = new Rule(-12, new int[]{162,61,-25,59});
    rules[30] = new Rule(-12, new int[]{186,61,-5,44,-5,59});
    rules[31] = new Rule(-12, new int[]{163,61,-14,59});
    rules[32] = new Rule(-12, new int[]{164,61,-14,59});
    rules[33] = new Rule(-12, new int[]{165,61,-14,59});
    rules[34] = new Rule(-12, new int[]{166,61,-14,59});
    rules[35] = new Rule(-12, new int[]{167,61,-14,59});
    rules[36] = new Rule(-12, new int[]{168,61,-14,59});
    rules[37] = new Rule(-12, new int[]{169,61,-14,59});
    rules[38] = new Rule(-12, new int[]{170,61,-14,59});
    rules[39] = new Rule(-12, new int[]{209,61,-6,59});
    rules[40] = new Rule(-12, new int[]{209,61,-5,59});
    rules[41] = new Rule(-12, new int[]{210,61,-6,59});
    rules[42] = new Rule(-12, new int[]{211,61,-6,59});
    rules[43] = new Rule(-12, new int[]{195,61,-5,59});
    rules[44] = new Rule(-12, new int[]{201,61,-11,59});
    rules[45] = new Rule(-2, new int[]{-1});
    rules[46] = new Rule(-2, new int[]{-2,-1});
    rules[47] = new Rule(-1, new int[]{-4,59});
    rules[48] = new Rule(-1, new int[]{-3,59});
    rules[49] = new Rule(-1, new int[]{-3});
    rules[50] = new Rule(-1, new int[]{131});
    rules[51] = new Rule(-3, new int[]{-21,40,-20,41,123,-16,125});
    rules[52] = new Rule(-4, new int[]{-19});
    rules[53] = new Rule(-4, new int[]{-19,61,-5});
    rules[54] = new Rule(-4, new int[]{-19,334,-5});
    rules[55] = new Rule(-4, new int[]{-19,335,-5});
    rules[56] = new Rule(-4, new int[]{-19,336,-5});
    rules[57] = new Rule(-4, new int[]{-19,337,-5});
    rules[58] = new Rule(-17, new int[]{-19});
    rules[59] = new Rule(-17, new int[]{-19,61,-5});
    rules[60] = new Rule(-17, new int[]{-19,334,-5});
    rules[61] = new Rule(-17, new int[]{-19,335,-5});
    rules[62] = new Rule(-17, new int[]{-19,336,-5});
    rules[63] = new Rule(-17, new int[]{-19,337,-5});
    rules[64] = new Rule(-20, new int[]{143});
    rules[65] = new Rule(-19, new int[]{144});
    rules[66] = new Rule(-21, new int[]{212});
    rules[67] = new Rule(-21, new int[]{213});
    rules[68] = new Rule(-21, new int[]{214});
    rules[69] = new Rule(-21, new int[]{215});
    rules[70] = new Rule(-21, new int[]{241});
    rules[71] = new Rule(-21, new int[]{242});
    rules[72] = new Rule(-21, new int[]{216});
    rules[73] = new Rule(-21, new int[]{217});
    rules[74] = new Rule(-21, new int[]{218});
    rules[75] = new Rule(-21, new int[]{219});
    rules[76] = new Rule(-21, new int[]{222});
    rules[77] = new Rule(-21, new int[]{220});
    rules[78] = new Rule(-21, new int[]{221});
    rules[79] = new Rule(-21, new int[]{223});
    rules[80] = new Rule(-21, new int[]{225});
    rules[81] = new Rule(-21, new int[]{226});
    rules[82] = new Rule(-21, new int[]{227});
    rules[83] = new Rule(-21, new int[]{228});
    rules[84] = new Rule(-21, new int[]{229});
    rules[85] = new Rule(-21, new int[]{230});
    rules[86] = new Rule(-21, new int[]{231});
    rules[87] = new Rule(-21, new int[]{232});
    rules[88] = new Rule(-21, new int[]{233});
    rules[89] = new Rule(-21, new int[]{234});
    rules[90] = new Rule(-21, new int[]{235});
    rules[91] = new Rule(-21, new int[]{236});
    rules[92] = new Rule(-21, new int[]{237});
    rules[93] = new Rule(-21, new int[]{238});
    rules[94] = new Rule(-21, new int[]{239});
    rules[95] = new Rule(-21, new int[]{240});
    rules[96] = new Rule(-21, new int[]{224});
    rules[97] = new Rule(-16, new int[]{-13});
    rules[98] = new Rule(-16, new int[]{-16,-13});
    rules[99] = new Rule(-13, new int[]{151,61,-5,59});
    rules[100] = new Rule(-13, new int[]{153,61,-5,59});
    rules[101] = new Rule(-13, new int[]{153,61,-6,59});
    rules[102] = new Rule(-13, new int[]{154,61,-8,59});
    rules[103] = new Rule(-13, new int[]{155,61,-18,59});
    rules[104] = new Rule(-13, new int[]{156,61,-8,59});
    rules[105] = new Rule(-13, new int[]{157,61,-8,59});
    rules[106] = new Rule(-13, new int[]{160,61,-8,59});
    rules[107] = new Rule(-13, new int[]{187,61,-18,59});
    rules[108] = new Rule(-13, new int[]{188,61,-18,59});
    rules[109] = new Rule(-13, new int[]{189,61,-18,59});
    rules[110] = new Rule(-13, new int[]{190,61,-18,59});
    rules[111] = new Rule(-13, new int[]{191,61,-18,59});
    rules[112] = new Rule(-13, new int[]{192,61,-18,59});
    rules[113] = new Rule(-13, new int[]{193,61,-18,59});
    rules[114] = new Rule(-13, new int[]{194,61,-18,59});
    rules[115] = new Rule(-13, new int[]{162,61,-26,59});
    rules[116] = new Rule(-13, new int[]{163,61,-14,59});
    rules[117] = new Rule(-13, new int[]{164,61,-14,59});
    rules[118] = new Rule(-13, new int[]{165,61,-14,59});
    rules[119] = new Rule(-13, new int[]{166,61,-14,59});
    rules[120] = new Rule(-13, new int[]{167,61,-14,59});
    rules[121] = new Rule(-13, new int[]{168,61,-14,59});
    rules[122] = new Rule(-13, new int[]{169,61,-14,59});
    rules[123] = new Rule(-13, new int[]{170,61,-14,59});
    rules[124] = new Rule(-13, new int[]{171,61,-8,59});
    rules[125] = new Rule(-13, new int[]{172,61,-8,59});
    rules[126] = new Rule(-13, new int[]{173,61,-8,59});
    rules[127] = new Rule(-13, new int[]{174,61,-8,59});
    rules[128] = new Rule(-13, new int[]{175,61,-8,59});
    rules[129] = new Rule(-13, new int[]{176,61,-8,59});
    rules[130] = new Rule(-13, new int[]{177,61,-8,59});
    rules[131] = new Rule(-13, new int[]{178,61,-8,59});
    rules[132] = new Rule(-13, new int[]{179,61,-8,59});
    rules[133] = new Rule(-13, new int[]{180,61,-8,59});
    rules[134] = new Rule(-13, new int[]{181,61,-8,59});
    rules[135] = new Rule(-13, new int[]{182,61,-8,59});
    rules[136] = new Rule(-13, new int[]{183,61,-8,59});
    rules[137] = new Rule(-13, new int[]{184,61,-8,59});
    rules[138] = new Rule(-13, new int[]{185,61,-8,59});
    rules[139] = new Rule(-13, new int[]{197,61,-5,44,-5,59});
    rules[140] = new Rule(-13, new int[]{198,61,-5,59});
    rules[141] = new Rule(-13, new int[]{199,61,-5,59});
    rules[142] = new Rule(-13, new int[]{200,61,-5,59});
    rules[143] = new Rule(-13, new int[]{201,61,-11,59});
    rules[144] = new Rule(-13, new int[]{202,61,-23,59});
    rules[145] = new Rule(-13, new int[]{203,61,123,-2,125,59});
    rules[146] = new Rule(-13, new int[]{203,61,123,-2,125});
    rules[147] = new Rule(-13, new int[]{204,61,-5,59});
    rules[148] = new Rule(-13, new int[]{205,61,-5,59});
    rules[149] = new Rule(-13, new int[]{206,61,-8,59});
    rules[150] = new Rule(-13, new int[]{207,61,-5,59});
    rules[151] = new Rule(-13, new int[]{208,61,-5,59});
    rules[152] = new Rule(-13, new int[]{195,61,-5,59});
    rules[153] = new Rule(-13, new int[]{-17,59});
    rules[154] = new Rule(-14, new int[]{-5,44,-10});
    rules[155] = new Rule(-14, new int[]{-10});
    rules[156] = new Rule(-14, new int[]{-5});
    rules[157] = new Rule(-10, new int[]{-11});
    rules[158] = new Rule(-10, new int[]{333});
    rules[159] = new Rule(-11, new int[]{145});
    rules[160] = new Rule(-7, new int[]{-5});
    rules[161] = new Rule(-7, new int[]{123,-5,125});
    rules[162] = new Rule(-7, new int[]{123,143,58,-5,125});
    rules[163] = new Rule(-7, new int[]{-7,43,-7});
    rules[164] = new Rule(-7, new int[]{-7,45,-7});
    rules[165] = new Rule(-8, new int[]{-9});
    rules[166] = new Rule(-8, new int[]{-7,44});
    rules[167] = new Rule(-8, new int[]{-7});
    rules[168] = new Rule(-8, new int[]{44,-7});
    rules[169] = new Rule(-9, new int[]{-7,44,-7});
    rules[170] = new Rule(-22, new int[]{-21,40,-20,41});
    rules[171] = new Rule(-23, new int[]{-22});
    rules[172] = new Rule(-23, new int[]{-23,44,-22});
    rules[173] = new Rule(-5, new int[]{148});
    rules[174] = new Rule(-5, new int[]{150});
    rules[175] = new Rule(-5, new int[]{-19});
    rules[176] = new Rule(-5, new int[]{-5,124,-5});
    rules[177] = new Rule(-5, new int[]{-5,38,-5});
    rules[178] = new Rule(-5, new int[]{-5,94,-5});
    rules[179] = new Rule(-5, new int[]{-5,43,-5});
    rules[180] = new Rule(-5, new int[]{-5,45,-5});
    rules[181] = new Rule(-5, new int[]{-5,141,-5});
    rules[182] = new Rule(-5, new int[]{-5,142,-5});
    rules[183] = new Rule(-5, new int[]{-5,338,-5});
    rules[184] = new Rule(-5, new int[]{-5,42,-5});
    rules[185] = new Rule(-5, new int[]{-5,47,-5});
    rules[186] = new Rule(-5, new int[]{-5,37,-5});
    rules[187] = new Rule(-5, new int[]{45,-5});
    rules[188] = new Rule(-5, new int[]{43,-5});
    rules[189] = new Rule(-5, new int[]{126,-5});
    rules[190] = new Rule(-5, new int[]{40,-5,41});
    rules[191] = new Rule(-6, new int[]{145});
    rules[192] = new Rule(-6, new int[]{-6,43,-6});
    rules[193] = new Rule(-6, new int[]{-6,46,-6});
    rules[194] = new Rule(-18, new int[]{-5,44,-5,44,-5,44,-5});
    rules[195] = new Rule(-18, new int[]{-5});
    rules[196] = new Rule(-25, new int[]{-24});
    rules[197] = new Rule(-25, new int[]{-25,124,-25});
    rules[198] = new Rule(-25, new int[]{-25,44,-25});
    rules[199] = new Rule(-25, new int[]{-25,43,-25});
    rules[200] = new Rule(-24, new int[]{243});
    rules[201] = new Rule(-24, new int[]{244});
    rules[202] = new Rule(-24, new int[]{245});
    rules[203] = new Rule(-24, new int[]{246});
    rules[204] = new Rule(-24, new int[]{247});
    rules[205] = new Rule(-24, new int[]{248});
    rules[206] = new Rule(-24, new int[]{249});
    rules[207] = new Rule(-24, new int[]{250});
    rules[208] = new Rule(-24, new int[]{251});
    rules[209] = new Rule(-24, new int[]{252});
    rules[210] = new Rule(-24, new int[]{253});
    rules[211] = new Rule(-24, new int[]{254});
    rules[212] = new Rule(-24, new int[]{255});
    rules[213] = new Rule(-24, new int[]{256});
    rules[214] = new Rule(-24, new int[]{257});
    rules[215] = new Rule(-24, new int[]{258});
    rules[216] = new Rule(-24, new int[]{259});
    rules[217] = new Rule(-24, new int[]{260});
    rules[218] = new Rule(-24, new int[]{261});
    rules[219] = new Rule(-24, new int[]{262});
    rules[220] = new Rule(-24, new int[]{263});
    rules[221] = new Rule(-24, new int[]{264});
    rules[222] = new Rule(-24, new int[]{265});
    rules[223] = new Rule(-24, new int[]{266});
    rules[224] = new Rule(-24, new int[]{267});
    rules[225] = new Rule(-24, new int[]{268});
    rules[226] = new Rule(-24, new int[]{269});
    rules[227] = new Rule(-24, new int[]{270});
    rules[228] = new Rule(-24, new int[]{271});
    rules[229] = new Rule(-24, new int[]{272});
    rules[230] = new Rule(-24, new int[]{273});
    rules[231] = new Rule(-24, new int[]{274});
    rules[232] = new Rule(-24, new int[]{275});
    rules[233] = new Rule(-24, new int[]{276});
    rules[234] = new Rule(-24, new int[]{277});
    rules[235] = new Rule(-24, new int[]{278});
    rules[236] = new Rule(-24, new int[]{279});
    rules[237] = new Rule(-24, new int[]{280});
    rules[238] = new Rule(-24, new int[]{281});
    rules[239] = new Rule(-24, new int[]{282});
    rules[240] = new Rule(-24, new int[]{283});
    rules[241] = new Rule(-24, new int[]{284});
    rules[242] = new Rule(-24, new int[]{285});
    rules[243] = new Rule(-24, new int[]{236});
    rules[244] = new Rule(-24, new int[]{286});
    rules[245] = new Rule(-24, new int[]{287});
    rules[246] = new Rule(-24, new int[]{288});
    rules[247] = new Rule(-24, new int[]{289});
    rules[248] = new Rule(-24, new int[]{290});
    rules[249] = new Rule(-24, new int[]{291});
    rules[250] = new Rule(-24, new int[]{292});
    rules[251] = new Rule(-26, new int[]{-27});
    rules[252] = new Rule(-26, new int[]{-26,124,-26});
    rules[253] = new Rule(-26, new int[]{-26,44,-26});
    rules[254] = new Rule(-26, new int[]{-26,43,-26});
    rules[255] = new Rule(-27, new int[]{268});
    rules[256] = new Rule(-27, new int[]{269});
    rules[257] = new Rule(-27, new int[]{270});
    rules[258] = new Rule(-27, new int[]{271});
    rules[259] = new Rule(-27, new int[]{272});
    rules[260] = new Rule(-27, new int[]{273});
    rules[261] = new Rule(-27, new int[]{274});
    rules[262] = new Rule(-27, new int[]{275});
    rules[263] = new Rule(-27, new int[]{276});
    rules[264] = new Rule(-27, new int[]{277});
    rules[265] = new Rule(-27, new int[]{293});
    rules[266] = new Rule(-27, new int[]{294});
    rules[267] = new Rule(-27, new int[]{295});
    rules[268] = new Rule(-27, new int[]{296});
    rules[269] = new Rule(-27, new int[]{297});
    rules[270] = new Rule(-27, new int[]{298});
    rules[271] = new Rule(-27, new int[]{299});
    rules[272] = new Rule(-27, new int[]{300});
    rules[273] = new Rule(-27, new int[]{301});
    rules[274] = new Rule(-27, new int[]{302});
    rules[275] = new Rule(-27, new int[]{303});
    rules[276] = new Rule(-27, new int[]{304});
    rules[277] = new Rule(-27, new int[]{305});
    rules[278] = new Rule(-27, new int[]{306});
    rules[279] = new Rule(-27, new int[]{307});
    rules[280] = new Rule(-27, new int[]{308});
    rules[281] = new Rule(-27, new int[]{309});
    rules[282] = new Rule(-27, new int[]{310});
    rules[283] = new Rule(-27, new int[]{311});
    rules[284] = new Rule(-27, new int[]{312});
    rules[285] = new Rule(-27, new int[]{290});
    rules[286] = new Rule(-27, new int[]{288});
    rules[287] = new Rule(-27, new int[]{287});
    rules[288] = new Rule(-27, new int[]{313});
    rules[289] = new Rule(-27, new int[]{314});
    rules[290] = new Rule(-27, new int[]{315});
    rules[291] = new Rule(-27, new int[]{316});
    rules[292] = new Rule(-27, new int[]{317});
    rules[293] = new Rule(-27, new int[]{318});
    rules[294] = new Rule(-27, new int[]{319});
    rules[295] = new Rule(-27, new int[]{320});
    rules[296] = new Rule(-27, new int[]{321});
    rules[297] = new Rule(-27, new int[]{322});
    rules[298] = new Rule(-27, new int[]{323});
    rules[299] = new Rule(-27, new int[]{324});
    rules[300] = new Rule(-27, new int[]{325});
    rules[301] = new Rule(-27, new int[]{326});
    rules[302] = new Rule(-27, new int[]{327});
    rules[303] = new Rule(-27, new int[]{328});
    rules[304] = new Rule(-27, new int[]{329});
    rules[305] = new Rule(-27, new int[]{330});
    rules[306] = new Rule(-27, new int[]{331});
    rules[307] = new Rule(-27, new int[]{332});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // window -> windowdef, statement_list
#line 268 "CWinParser.y"
                               {	topCtrl = ValueStack[ValueStack.Depth-1].ctrl;	}
#line default
        break;
      case 4: // window -> statement_list, windowdef, statement_list
#line 269 "CWinParser.y"
                                          {	ValueStack[ValueStack.Depth-3].ctrl.next = ValueStack[ValueStack.Depth-1].ctrl;topCtrl = ValueStack[ValueStack.Depth-3].ctrl;	}
#line default
        break;
      case 5: // window -> windowdef
#line 270 "CWinParser.y"
                    {	topCtrl = null;	}
#line default
        break;
      case 6: // windowdef -> WINDOW_DEF, '(', expression, ')', '{', window_property_list, '}', 
              //              ';'
#line 273 "CWinParser.y"
                                                                {	setWindowProperty((uint) ValueStack[ValueStack.Depth-6].value,ValueStack[ValueStack.Depth-3].prop);	}
#line default
        break;
      case 7: // windowdef -> WINDOW_DEF, '(', expression, ')', '{', window_property_list, '}'
#line 274 "CWinParser.y"
                                                             {	setWindowProperty((uint) ValueStack[ValueStack.Depth-5].value,ValueStack[ValueStack.Depth-2].prop);	}
#line default
        break;
      case 8: // window_property_list -> window_property
#line 278 "CWinParser.y"
                         {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-1].prop;		}
#line default
        break;
      case 9: // window_property_list -> window_property_list, window_property
#line 279 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;
														if (CurrentSemanticValue.prop == null) {
															CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-1].prop;
														} else if (CurrentSemanticValue.prop != null) {
															CurrentSemanticValue.prop.next = ValueStack[ValueStack.Depth-1].prop;
														}
													}
#line default
        break;
      case 10: // window_property -> PROPERTY_CAPTION, '=', expression, ';'
#line 288 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 11: // window_property -> PROPERTY_CAPTION, '=', strexp, ';'
#line 289 "CWinParser.y"
                                     {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION_STR,ValueStack[ValueStack.Depth-2].str);	}
#line default
        break;
      case 12: // window_property -> PROPERTY_CAPTION_OFFSET, '=', pairratio, ';'
#line 290 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION_OFFSET,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 13: // window_property -> PROPERTY_POSITION, '=', pairratio, ';'
#line 291 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.POSITION,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 14: // window_property -> PROPERTY_SCREEN, '=', fpairratio, ',', fpairratio, ';'
#line 292 "CWinParser.y"
                                                    {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.SCREEN,ValueStack[ValueStack.Depth-4].pairratio,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 15: // window_property -> PROPERTY_SCREEN, '=', PROPERTY_SAFEAREA, '(', fpairratio, 
               //                    ',', fpairratio, ')', ';'
#line 293 "CWinParser.y"
                                                                              {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.SAFEAREA,ValueStack[ValueStack.Depth-5].pairratio,ValueStack[ValueStack.Depth-3].pairratio);	}
#line default
        break;
      case 16: // window_property -> PROPERTY_CLOSE_POSITION, '=', pairratio, ';'
#line 294 "CWinParser.y"
                                            {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CLOSE_POSITION,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 17: // window_property -> PROPERTY_CLOSE_SCALE, '=', expression, ',', expression, ',', 
               //                    expression, ',', expression, ';'
#line 295 "CWinParser.y"
                                                                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CLOSE_SCALE,new Vector4((float) ValueStack[ValueStack.Depth-8].value,(float) ValueStack[ValueStack.Depth-6].value,(float) ValueStack[ValueStack.Depth-4].value,(float) ValueStack[ValueStack.Depth-2].value));	}
#line default
        break;
      case 18: // window_property -> PROPERTY_SIZE, '=', pairratio, ';'
#line 296 "CWinParser.y"
                                     {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.SIZE,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 19: // window_property -> PROPERTY_CAPTION_COLOR, '=', color, ';'
#line 297 "CWinParser.y"
                                         {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION_COLOR,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 20: // window_property -> PROPERTY_COLOR0, '=', color, ';'
#line 298 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR0,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 21: // window_property -> PROPERTY_COLOR1, '=', color, ';'
#line 299 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR1,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 22: // window_property -> PROPERTY_COLOR2, '=', color, ';'
#line 300 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR2,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 23: // window_property -> PROPERTY_COLOR3, '=', color, ';'
#line 301 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR3,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 24: // window_property -> PROPERTY_COLOR4, '=', color, ';'
#line 302 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR4,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 25: // window_property -> PROPERTY_COLOR5, '=', color, ';'
#line 303 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR5,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 26: // window_property -> PROPERTY_COLOR6, '=', color, ';'
#line 304 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR6,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 27: // window_property -> PROPERTY_COLOR7, '=', color, ';'
#line 305 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR7,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 28: // window_property -> PROPERTY_PRIORITY, '=', expression, ';'
#line 306 "CWinParser.y"
                                         {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.PRIORITY,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 29: // window_property -> PROPERTY_STYLE, '=', windowstyles, ';'
#line 307 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.STYLE,(int) ValueStack[ValueStack.Depth-2].winstyle);	}
#line default
        break;
      case 30: // window_property -> PROPERTY_TEXTURE_ZOFFSET, '=', expression, ',', expression, 
               //                    ';'
#line 308 "CWinParser.y"
                                                              {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_ZOFFSET,(uint) ValueStack[ValueStack.Depth-4].value,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 31: // window_property -> PROPERTY_TEX_ID0, '=', texid, ';'
#line 309 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID0;	}
#line default
        break;
      case 32: // window_property -> PROPERTY_TEX_ID1, '=', texid, ';'
#line 310 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID1;	}
#line default
        break;
      case 33: // window_property -> PROPERTY_TEX_ID2, '=', texid, ';'
#line 311 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID2;	}
#line default
        break;
      case 34: // window_property -> PROPERTY_TEX_ID3, '=', texid, ';'
#line 312 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID3;	}
#line default
        break;
      case 35: // window_property -> PROPERTY_TEX_ID4, '=', texid, ';'
#line 313 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID4;	}
#line default
        break;
      case 36: // window_property -> PROPERTY_TEX_ID5, '=', texid, ';'
#line 314 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID5;	}
#line default
        break;
      case 37: // window_property -> PROPERTY_TEX_ID6, '=', texid, ';'
#line 315 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID6;	}
#line default
        break;
      case 38: // window_property -> PROPERTY_TEX_ID7, '=', texid, ';'
#line 316 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID7;	}
#line default
        break;
      case 39: // window_property -> PROPERTY_RESOURCE, '=', strexp, ';'
#line 317 "CWinParser.y"
                                      {	CurrentSemanticValue.prop = null;
													m_exportpath = CWinParserProperty.encoding(ValueStack[ValueStack.Depth-2].str);
													m_mAssetBundle = 0;
												}
#line default
        break;
      case 40: // window_property -> PROPERTY_RESOURCE, '=', expression, ';'
#line 321 "CWinParser.y"
                                         {	CurrentSemanticValue.prop = null;
													m_exportpath = "";
													m_mAssetBundle = (uint) ValueStack[ValueStack.Depth-2].value;
												}
#line default
        break;
      case 41: // window_property -> PROPERTY_PATH, '=', strexp, ';'
#line 325 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = null;
													m_path = CWinParserProperty.encoding(ValueStack[ValueStack.Depth-2].str);
												}
#line default
        break;
      case 42: // window_property -> PROPERTY_BASECLASS, '=', strexp, ';'
#line 328 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = null;
													m_baseclass = CWinParserProperty.encoding(ValueStack[ValueStack.Depth-2].str);
												}
#line default
        break;
      case 43: // window_property -> PROPERTY_SE_ID, '=', expression, ';'
#line 331 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.SE_ID,(int) ValueStack[ValueStack.Depth-2].value);		}
#line default
        break;
      case 44: // window_property -> PROPERTY_FONT_KIND, '=', five_cc, ';'
#line 332 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.FONT_KIND,(int) ValueStack[ValueStack.Depth-2].uvalue);}
#line default
        break;
      case 45: // statement_list -> statement
#line 336 "CWinParser.y"
                {	CurrentSemanticValue.ctrl = ValueStack[ValueStack.Depth-1].ctrl;	}
#line default
        break;
      case 46: // statement_list -> statement_list, statement
#line 337 "CWinParser.y"
                            {	CurrentSemanticValue.ctrl = ValueStack[ValueStack.Depth-2].ctrl;CurrentSemanticValue.ctrl.next = ValueStack[ValueStack.Depth-1].ctrl;	}
#line default
        break;
      case 47: // statement -> substitute, ';'
#line 341 "CWinParser.y"
                    {	CurrentSemanticValue.ctrl = ValueStack[ValueStack.Depth-2].ctrl;	}
#line default
        break;
      case 48: // statement -> ctrldef, ';'
#line 342 "CWinParser.y"
                  {	CurrentSemanticValue.ctrl = ValueStack[ValueStack.Depth-2].ctrl;	}
#line default
        break;
      case 49: // statement -> ctrldef
#line 343 "CWinParser.y"
               {	CurrentSemanticValue.ctrl = ValueStack[ValueStack.Depth-1].ctrl;	}
#line default
        break;
      case 50: // statement -> PRAGMA
#line 344 "CWinParser.y"
               {
										CurrentSemanticValue.ctrl = new CWinParserCtrl();
									if (parsePragma(ValueStack[ValueStack.Depth-1].str) < 0) {
											string err = "pragma syntax error:" + ValueStack[ValueStack.Depth-1].str;
											m_scanner.yyerror(err);
										}
									}
#line default
        break;
      case 51: // ctrldef -> ctrl_type, '(', identifier, ')', '{', ctrl_property_list, '}'
#line 354 "CWinParser.y"
                                                            {
	 	e_WinCtrlKind	eKind = (e_WinCtrlKind) ValueStack[ValueStack.Depth-7].value;
	 	CWinParserProperty	cProperty = ValueStack[ValueStack.Depth-2].prop;
	 	CurrentSemanticValue.ctrl = new CWinParserCtrl(eKind,ValueStack[ValueStack.Depth-5].str,cProperty);
	 	for (;cProperty != null;cProperty = cProperty.next) {
	 		switch (cProperty.property) {
	 		case e_WinProperty.STYLE:
	 			cProperty.setValue = (int) CWinPropertyCheck.check(eKind,cProperty.styles,m_scanner);
	 			break;
	 		case e_WinProperty.GROUP:
	 			CWinPropertyCheck.check(eKind,cProperty.property,m_scanner);
 				switch (eKind) {
 				case e_WinCtrlKind.LISTBOX:
 					for (CWinNumberList cNL = cProperty.getNumberList;cNL != null;cNL = cNL.next) {
 						if (cNL.kind != e_WinCtrlKind.SCROLLBAR) {
 							m_scanner.yyerror("GROUP property of " + eKind + " only set SCROLLBAR control(s).");
 						}
 					}
 					break;
 				case e_WinCtrlKind.LISTBOXEX:
 					goto case e_WinCtrlKind.LISTBOX;
 				case e_WinCtrlKind.LOG:
 					goto case e_WinCtrlKind.LISTBOX;
 				case e_WinCtrlKind.CONTAINER:
 					goto case e_WinCtrlKind.LISTBOX;
 				case e_WinCtrlKind.RADIO:
 					for (CWinNumberList cNL = cProperty.getNumberList;cNL != null;cNL = cNL.next) {
 						if (cNL.kind != e_WinCtrlKind.RADIO) {
 							m_scanner.yyerror("GROUP property of " + eKind + " only set RADIO control(s).");
 						}
 					}
 					break;
 				}
	 			break;
		 	default:
	 			CWinPropertyCheck.check(eKind,cProperty.property,m_scanner);
	 			break;
	 		}
	 	}
	 }
#line default
        break;
      case 52: // substitute -> variable
#line 396 "CWinParser.y"
          {
		registVariable(ValueStack[ValueStack.Depth-1].str,0);
		CurrentSemanticValue.ctrl = new CWinParserCtrl();
	}
#line default
        break;
      case 53: // substitute -> variable, '=', expression
#line 400 "CWinParser.y"
                          {
		registVariable(ValueStack[ValueStack.Depth-3].str,ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.ctrl = new CWinParserCtrl();
	}
#line default
        break;
      case 54: // substitute -> variable, SUBSTITUTE_ADD, expression
#line 404 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue + ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.ctrl = new CWinParserCtrl();
	}
#line default
        break;
      case 55: // substitute -> variable, SUBSTITUTE_SUB, expression
#line 410 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue - ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.ctrl = new CWinParserCtrl();
	}
#line default
        break;
      case 56: // substitute -> variable, SUBSTITUTE_MUL, expression
#line 416 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue * ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.ctrl = new CWinParserCtrl();
	}
#line default
        break;
      case 57: // substitute -> variable, SUBSTITUTE_DIV, expression
#line 422 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue / ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.ctrl = new CWinParserCtrl();
	}
#line default
        break;
      case 58: // substitute_in_ctrl -> variable
#line 430 "CWinParser.y"
          {
		registVariable(ValueStack[ValueStack.Depth-1].str,0);
		CurrentSemanticValue.prop = new CWinParserProperty();
	}
#line default
        break;
      case 59: // substitute_in_ctrl -> variable, '=', expression
#line 434 "CWinParser.y"
                          {
		registVariable(ValueStack[ValueStack.Depth-3].str,ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CWinParserProperty();
	}
#line default
        break;
      case 60: // substitute_in_ctrl -> variable, SUBSTITUTE_ADD, expression
#line 438 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue + ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CWinParserProperty();
	}
#line default
        break;
      case 61: // substitute_in_ctrl -> variable, SUBSTITUTE_SUB, expression
#line 444 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue - ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CWinParserProperty();
	}
#line default
        break;
      case 62: // substitute_in_ctrl -> variable, SUBSTITUTE_MUL, expression
#line 450 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue * ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CWinParserProperty();
	}
#line default
        break;
      case 63: // substitute_in_ctrl -> variable, SUBSTITUTE_DIV, expression
#line 456 "CWinParser.y"
                                      {
		double	fValue = 0;
		getVariable(out fValue,ValueStack[ValueStack.Depth-3].str);
		registVariable(ValueStack[ValueStack.Depth-3].str,fValue / ValueStack[ValueStack.Depth-1].value);
		CurrentSemanticValue.prop = new CWinParserProperty();
	}
#line default
        break;
      case 64: // identifier -> IDENTIFIER
#line 464 "CWinParser.y"
                 {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 65: // variable -> VARIABLE
#line 467 "CWinParser.y"
               {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 66: // ctrl_type -> WINCTRL_CLOSEBUTTON
#line 470 "CWinParser.y"
                       {	CurrentSemanticValue.value = (int) e_WinCtrlKind.WINDOWCLOSEBUTTON;	}
#line default
        break;
      case 67: // ctrl_type -> WINCTRL_WINDOWCAPTION
#line 471 "CWinParser.y"
                         {	CurrentSemanticValue.value = (int) e_WinCtrlKind.WINDOWCAPTION;	}
#line default
        break;
      case 68: // ctrl_type -> WINCTRL_TEXT
#line 472 "CWinParser.y"
                  {	CurrentSemanticValue.value = (int) e_WinCtrlKind.TEXT;	}
#line default
        break;
      case 69: // ctrl_type -> WINCTRL_RICHTEXT
#line 473 "CWinParser.y"
                     {	CurrentSemanticValue.value = (int) e_WinCtrlKind.RICHTEXT;	}
#line default
        break;
      case 70: // ctrl_type -> WINCTRL_LOG
#line 474 "CWinParser.y"
                 {	CurrentSemanticValue.value = (int) e_WinCtrlKind.LOG;		}
#line default
        break;
      case 71: // ctrl_type -> WINCTRL_LOGTEXT
#line 475 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.LOGTEXT;	}
#line default
        break;
      case 72: // ctrl_type -> WINCTRL_EDITBOX
#line 476 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.EDITBOX;	}
#line default
        break;
      case 73: // ctrl_type -> WINCTRL_TEXTBOX
#line 477 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.TEXTBOX;	}
#line default
        break;
      case 74: // ctrl_type -> WINCTRL_RICHTEXTBOX
#line 478 "CWinParser.y"
                       {	CurrentSemanticValue.value = (int) e_WinCtrlKind.RICHTEXTBOX;	}
#line default
        break;
      case 75: // ctrl_type -> WINCTRL_BUTTON
#line 479 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.BUTTON;	}
#line default
        break;
      case 76: // ctrl_type -> WINCTRL_RADIO
#line 480 "CWinParser.y"
                   {	CurrentSemanticValue.value = (int) e_WinCtrlKind.RADIO;	}
#line default
        break;
      case 77: // ctrl_type -> WINCTRL_CHECKBOX
#line 481 "CWinParser.y"
                     {	CurrentSemanticValue.value = (int) e_WinCtrlKind.CHECKBOX;	}
#line default
        break;
      case 78: // ctrl_type -> WINCTRL_COMBOBOX
#line 482 "CWinParser.y"
                     {	CurrentSemanticValue.value = (int) e_WinCtrlKind.COMBOBOX;	}
#line default
        break;
      case 79: // ctrl_type -> WINCTRL_TEXTURE
#line 483 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.TEXTURE;	}
#line default
        break;
      case 80: // ctrl_type -> WINCTRL_RENDER
#line 484 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.RENDER;	}
#line default
        break;
      case 81: // ctrl_type -> WINCTRL_CANVAS
#line 485 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.CANVAS;	}
#line default
        break;
      case 82: // ctrl_type -> WINCTRL_ICON
#line 486 "CWinParser.y"
                  {	CurrentSemanticValue.value = (int) e_WinCtrlKind.ICON;	}
#line default
        break;
      case 83: // ctrl_type -> WINCTRL_RENDERICON
#line 487 "CWinParser.y"
                       {	CurrentSemanticValue.value = (int) e_WinCtrlKind.RENDERICON;	}
#line default
        break;
      case 84: // ctrl_type -> WINCTRL_RECASTICON
#line 488 "CWinParser.y"
                       {	CurrentSemanticValue.value = (int) e_WinCtrlKind.RECASTICON;	}
#line default
        break;
      case 85: // ctrl_type -> WINCTRL_METER
#line 489 "CWinParser.y"
                   {	CurrentSemanticValue.value = (int) e_WinCtrlKind.METER;	}
#line default
        break;
      case 86: // ctrl_type -> WINCTRL_SCROLLBAR
#line 490 "CWinParser.y"
                      {	CurrentSemanticValue.value = (int) e_WinCtrlKind.SCROLLBAR;	}
#line default
        break;
      case 87: // ctrl_type -> WINCTRL_LISTBOX
#line 491 "CWinParser.y"
                    {	CurrentSemanticValue.value = (int) e_WinCtrlKind.LISTBOX;	}
#line default
        break;
      case 88: // ctrl_type -> WINCTRL_LISTBOXEX
#line 492 "CWinParser.y"
                      {	CurrentSemanticValue.value = (int) e_WinCtrlKind.LISTBOXEX;	}
#line default
        break;
      case 89: // ctrl_type -> WINCTRL_CONTAINER
#line 493 "CWinParser.y"
                      {	CurrentSemanticValue.value = (int) e_WinCtrlKind.CONTAINER;	}
#line default
        break;
      case 90: // ctrl_type -> WINCTRL_SLIDEBAR
#line 494 "CWinParser.y"
                     {	CurrentSemanticValue.value = (int) e_WinCtrlKind.SLIDEBAR;	}
#line default
        break;
      case 91: // ctrl_type -> WINCTRL_FRAME
#line 495 "CWinParser.y"
                   {	CurrentSemanticValue.value = (int) e_WinCtrlKind.FRAME;	}
#line default
        break;
      case 92: // ctrl_type -> WINCTRL_LABEL
#line 496 "CWinParser.y"
                   {	CurrentSemanticValue.value = (int) e_WinCtrlKind.LABEL;	}
#line default
        break;
      case 93: // ctrl_type -> WINCTRL_BAR
#line 497 "CWinParser.y"
                 {	CurrentSemanticValue.value = (int) e_WinCtrlKind.BAR;	}
#line default
        break;
      case 94: // ctrl_type -> WINCTRL_WINDOWMINIMIZATION
#line 498 "CWinParser.y"
                             {	CurrentSemanticValue.value = (int) e_WinCtrlKind.WINDOWMINIMIZATION;	}
#line default
        break;
      case 95: // ctrl_type -> WINCTRL_HELPBUTTON
#line 499 "CWinParser.y"
                       {	CurrentSemanticValue.value = (int) e_WinCtrlKind.HELPBUTTON;	}
#line default
        break;
      case 96: // ctrl_type -> WINCTRL_LINE
#line 500 "CWinParser.y"
                  {	CurrentSemanticValue.value = (int) e_WinCtrlKind.LINE;	}
#line default
        break;
      case 97: // ctrl_property_list -> ctrl_property
#line 504 "CWinParser.y"
                      {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-1].prop;	}
#line default
        break;
      case 98: // ctrl_property_list -> ctrl_property_list, ctrl_property
#line 505 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;CurrentSemanticValue.prop.next = ValueStack[ValueStack.Depth-1].prop;	}
#line default
        break;
      case 99: // ctrl_property -> PROPERTY_ID, '=', expression, ';'
#line 508 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.ID,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 100: // ctrl_property -> PROPERTY_CAPTION, '=', expression, ';'
#line 509 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 101: // ctrl_property -> PROPERTY_CAPTION, '=', strexp, ';'
#line 510 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION_STR,ValueStack[ValueStack.Depth-2].str);	}
#line default
        break;
      case 102: // ctrl_property -> PROPERTY_CAPTION_OFFSET, '=', pairratio, ';'
#line 511 "CWinParser.y"
                                            {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION_OFFSET,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 103: // ctrl_property -> PROPERTY_CAPTION_COLOR, '=', color, ';'
#line 512 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CAPTION_COLOR,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 104: // ctrl_property -> PROPERTY_POSITION, '=', pairratio, ';'
#line 513 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.POSITION,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 105: // ctrl_property -> PROPERTY_POSITION2, '=', pairratio, ';'
#line 514 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.POSITION2,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 106: // ctrl_property -> PROPERTY_SIZE, '=', pairratio, ';'
#line 515 "CWinParser.y"
                                    {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.SIZE,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 107: // ctrl_property -> PROPERTY_COLOR0, '=', color, ';'
#line 516 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR0,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 108: // ctrl_property -> PROPERTY_COLOR1, '=', color, ';'
#line 517 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR1,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 109: // ctrl_property -> PROPERTY_COLOR2, '=', color, ';'
#line 518 "CWinParser.y"
                                  {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR2,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 110: // ctrl_property -> PROPERTY_COLOR3, '=', color, ';'
#line 519 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR3,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 111: // ctrl_property -> PROPERTY_COLOR4, '=', color, ';'
#line 520 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR4,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 112: // ctrl_property -> PROPERTY_COLOR5, '=', color, ';'
#line 521 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR5,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 113: // ctrl_property -> PROPERTY_COLOR6, '=', color, ';'
#line 522 "CWinParser.y"
                                  {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR6,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 114: // ctrl_property -> PROPERTY_COLOR7, '=', color, ';'
#line 523 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.COLOR7,(int) ValueStack[ValueStack.Depth-2].uvalue);	}
#line default
        break;
      case 115: // ctrl_property -> PROPERTY_STYLE, '=', ctrlstyles, ';'
#line 524 "CWinParser.y"
                                      {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.setStyle(ValueStack[ValueStack.Depth-2].ctrlstyles);	}
#line default
        break;
      case 116: // ctrl_property -> PROPERTY_TEX_ID0, '=', texid, ';'
#line 525 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID0;	}
#line default
        break;
      case 117: // ctrl_property -> PROPERTY_TEX_ID1, '=', texid, ';'
#line 526 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID1;	}
#line default
        break;
      case 118: // ctrl_property -> PROPERTY_TEX_ID2, '=', texid, ';'
#line 527 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID2;	}
#line default
        break;
      case 119: // ctrl_property -> PROPERTY_TEX_ID3, '=', texid, ';'
#line 528 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID3;	}
#line default
        break;
      case 120: // ctrl_property -> PROPERTY_TEX_ID4, '=', texid, ';'
#line 529 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID4;	}
#line default
        break;
      case 121: // ctrl_property -> PROPERTY_TEX_ID5, '=', texid, ';'
#line 530 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID5;	}
#line default
        break;
      case 122: // ctrl_property -> PROPERTY_TEX_ID6, '=', texid, ';'
#line 531 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID6;	}
#line default
        break;
      case 123: // ctrl_property -> PROPERTY_TEX_ID7, '=', texid, ';'
#line 532 "CWinParser.y"
                                   {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;ValueStack[ValueStack.Depth-2].prop.property = e_WinProperty.TEX_ID7;	}
#line default
        break;
      case 124: // ctrl_property -> PROPERTY_TEXTURE_OFFSET0, '=', pairratio, ';'
#line 533 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET0,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 125: // ctrl_property -> PROPERTY_TEXTURE_OFFSET1, '=', pairratio, ';'
#line 534 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET1,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 126: // ctrl_property -> PROPERTY_TEXTURE_OFFSET2, '=', pairratio, ';'
#line 535 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET2,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 127: // ctrl_property -> PROPERTY_TEXTURE_OFFSET3, '=', pairratio, ';'
#line 536 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET3,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 128: // ctrl_property -> PROPERTY_TEXTURE_OFFSET4, '=', pairratio, ';'
#line 537 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET4,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 129: // ctrl_property -> PROPERTY_TEXTURE_OFFSET5, '=', pairratio, ';'
#line 538 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET5,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 130: // ctrl_property -> PROPERTY_TEXTURE_OFFSET6, '=', pairratio, ';'
#line 539 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET6,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 131: // ctrl_property -> PROPERTY_TEXTURE_OFFSET7, '=', pairratio, ';'
#line 540 "CWinParser.y"
                                             {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_OFFSET7,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 132: // ctrl_property -> PROPERTY_TEXTURE_SIZE1, '=', pairratio, ';'
#line 541 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_SIZE1,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 133: // ctrl_property -> PROPERTY_TEXTURE_SIZE2, '=', pairratio, ';'
#line 542 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_SIZE2,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 134: // ctrl_property -> PROPERTY_TEXTURE_SIZE3, '=', pairratio, ';'
#line 543 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_SIZE3,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 135: // ctrl_property -> PROPERTY_TEXTURE_SIZE4, '=', pairratio, ';'
#line 544 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_SIZE4,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 136: // ctrl_property -> PROPERTY_TEXTURE_SIZE5, '=', pairratio, ';'
#line 545 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_SIZE5,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 137: // ctrl_property -> PROPERTY_TEXTURE_SIZE6, '=', pairratio, ';'
#line 546 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_SIZE6,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 138: // ctrl_property -> PROPERTY_TEXTURE_SIZE7, '=', pairratio, ';'
#line 547 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEXTURE_SIZE7,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 139: // ctrl_property -> PROPERTY_EDIT, '=', expression, ',', expression, ';'
#line 548 "CWinParser.y"
                                                  {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.EDIT,(int) ValueStack[ValueStack.Depth-4].value,(uint) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 140: // ctrl_property -> PROPERTY_RELATION_ID, '=', expression, ';'
#line 549 "CWinParser.y"
                                          {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.RELATION_ID,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 141: // ctrl_property -> PROPERTY_HELP_ID, '=', expression, ';'
#line 550 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.HELP_ID,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 142: // ctrl_property -> PROPERTY_TOOLTIP, '=', expression, ';'
#line 551 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TOOLTIP,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 143: // ctrl_property -> PROPERTY_FONT_KIND, '=', five_cc, ';'
#line 552 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.FONT_KIND,(int) ValueStack[ValueStack.Depth-2].uvalue);}
#line default
        break;
      case 144: // ctrl_property -> PROPERTY_GROUP, '=', ctrlid_list, ';'
#line 553 "CWinParser.y"
                                       {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.GROUP,ValueStack[ValueStack.Depth-2].numberlist);	}
#line default
        break;
      case 145: // ctrl_property -> PROPERTY_CONTENTS, '=', '{', statement_list, '}', ';'
#line 554 "CWinParser.y"
                                                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CONTENTS,ValueStack[ValueStack.Depth-3].ctrl);	}
#line default
        break;
      case 146: // ctrl_property -> PROPERTY_CONTENTS, '=', '{', statement_list, '}'
#line 555 "CWinParser.y"
                                               {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CONTENTS,ValueStack[ValueStack.Depth-2].ctrl);	}
#line default
        break;
      case 147: // ctrl_property -> PROPERTY_SLIDEMAX, '=', expression, ';'
#line 556 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.SLIDEMAX,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 148: // ctrl_property -> PROPERTY_PRIORITY, '=', expression, ';'
#line 557 "CWinParser.y"
                                        {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.PRIORITY,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 149: // ctrl_property -> PROPERTY_CONTENTS_SIZE, '=', pairratio, ';'
#line 558 "CWinParser.y"
                                           {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.CONTENTS_SIZE,ValueStack[ValueStack.Depth-2].pairratio);	}
#line default
        break;
      case 150: // ctrl_property -> PROPERTY_LINE_SPACE, '=', expression, ';'
#line 559 "CWinParser.y"
                                          {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.LINE_SPACE,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 151: // ctrl_property -> PROPERTY_LINE_FEED_OFFSET, '=', expression, ';'
#line 560 "CWinParser.y"
                                                {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.LINE_FEED_OFFSET,(int) ValueStack[ValueStack.Depth-2].value);	}
#line default
        break;
      case 152: // ctrl_property -> PROPERTY_SE_ID, '=', expression, ';'
#line 561 "CWinParser.y"
                                      {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.SE_ID,(int) ValueStack[ValueStack.Depth-2].value);		}
#line default
        break;
      case 153: // ctrl_property -> substitute_in_ctrl, ';'
#line 562 "CWinParser.y"
                              {	CurrentSemanticValue.prop = ValueStack[ValueStack.Depth-2].prop;	}
#line default
        break;
      case 154: // texid -> expression, ',', partid
#line 566 "CWinParser.y"
                          {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEX_ID0,(int) ValueStack[ValueStack.Depth-3].value,ValueStack[ValueStack.Depth-1].uvalue);}
#line default
        break;
      case 155: // texid -> partid
#line 567 "CWinParser.y"
                {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEX_ID0,0,ValueStack[ValueStack.Depth-1].uvalue);}
#line default
        break;
      case 156: // texid -> expression
#line 568 "CWinParser.y"
                   {	CurrentSemanticValue.prop = new CWinParserProperty();CurrentSemanticValue.prop.set(e_WinProperty.TEX_ID0,(int) ValueStack[ValueStack.Depth-1].value,0);	}
#line default
        break;
      case 157: // partid -> five_cc
#line 571 "CWinParser.y"
                {	CurrentSemanticValue.uvalue = ValueStack[ValueStack.Depth-1].uvalue;			}
#line default
        break;
      case 158: // partid -> NONE
#line 572 "CWinParser.y"
              {	CurrentSemanticValue.uvalue = 0xffffffff;	}
#line default
        break;
      case 159: // five_cc -> LIT_STRING
#line 575 "CWinParser.y"
                  {	if (!FiveCC.isFiveCC(ValueStack[ValueStack.Depth-1].str)) {
												m_scanner.yyerror("this string is not [five cc]:" + ValueStack[ValueStack.Depth-1].str);
												YYError();
											}
											FiveCC	fiveCC = new FiveCC(ValueStack[ValueStack.Depth-1].str);
											CurrentSemanticValue.uvalue = fiveCC;
										}
#line default
        break;
      case 160: // ratio -> expression
#line 584 "CWinParser.y"
                              {	CurrentSemanticValue.v4 = new Vector4((float) ValueStack[ValueStack.Depth-1].value,0f,0f,0f);	}
#line default
        break;
      case 161: // ratio -> '{', expression, '}'
#line 585 "CWinParser.y"
                                      {	CurrentSemanticValue.v4 = new Vector4(0f,0f,0f,(float) ValueStack[ValueStack.Depth-2].value/100f);	}
#line default
        break;
      case 162: // ratio -> '{', IDENTIFIER, ':', expression, '}'
#line 586 "CWinParser.y"
                                                 {
		string key = ValueStack[ValueStack.Depth-4].str.ToLower();
		if (key == "width" || key == "x") {
			CurrentSemanticValue.v4 = new Vector4(0f,(float) ValueStack[ValueStack.Depth-2].value/100f,0f,0f);
		} else if (key == "height" || key == "y") {
			CurrentSemanticValue.v4 = new Vector4(0f,0f,(float) ValueStack[ValueStack.Depth-2].value/100f,0f);
		} else {
			m_scanner.yyerror("this key word is not ratio key:" + ValueStack[ValueStack.Depth-4].str + ",you can use x or y");
			YYError();
		}
	}
#line default
        break;
      case 163: // ratio -> ratio, '+', ratio
#line 597 "CWinParser.y"
                       {	CurrentSemanticValue.v4 = ValueStack[ValueStack.Depth-3].v4 + ValueStack[ValueStack.Depth-1].v4;	}
#line default
        break;
      case 164: // ratio -> ratio, '-', ratio
#line 598 "CWinParser.y"
                       {	CurrentSemanticValue.v4 = ValueStack[ValueStack.Depth-3].v4 - ValueStack[ValueStack.Depth-1].v4;	}
#line default
        break;
      case 165: // pairratio -> fpairratio
#line 601 "CWinParser.y"
               { CurrentSemanticValue.pairratio = ValueStack[ValueStack.Depth-1].pairratio;	}
#line default
        break;
      case 166: // pairratio -> ratio, ','
#line 602 "CWinParser.y"
                {	CurrentSemanticValue.pairratio = createPairRatio(ValueStack[ValueStack.Depth-2].v4,Vector4.zero);	}
#line default
        break;
      case 167: // pairratio -> ratio
#line 603 "CWinParser.y"
             {	CurrentSemanticValue.pairratio = createPairRatio(ValueStack[ValueStack.Depth-1].v4,Vector4.zero);	}
#line default
        break;
      case 168: // pairratio -> ',', ratio
#line 604 "CWinParser.y"
               {	CurrentSemanticValue.pairratio = createPairRatio(Vector4.zero,ValueStack[ValueStack.Depth-1].v4);	}
#line default
        break;
      case 169: // fpairratio -> ratio, ',', ratio
#line 608 "CWinParser.y"
                   {	CurrentSemanticValue.pairratio = createPairRatio(ValueStack[ValueStack.Depth-3].v4,ValueStack[ValueStack.Depth-1].v4);	}
#line default
        break;
      case 170: // ctrlid -> ctrl_type, '(', identifier, ')'
#line 615 "CWinParser.y"
                              {	CurrentSemanticValue.numberlist = new  CWinNumberList((e_WinCtrlKind) ValueStack[ValueStack.Depth-4].value,ValueStack[ValueStack.Depth-2].str);	}
#line default
        break;
      case 171: // ctrlid_list -> ctrlid
#line 618 "CWinParser.y"
             {	CurrentSemanticValue.numberlist = ValueStack[ValueStack.Depth-1].numberlist;		}
#line default
        break;
      case 172: // ctrlid_list -> ctrlid_list, ',', ctrlid
#line 619 "CWinParser.y"
                          {	CurrentSemanticValue.numberlist = ValueStack[ValueStack.Depth-3].numberlist;ValueStack[ValueStack.Depth-3].numberlist.next = ValueStack[ValueStack.Depth-1].numberlist;	}
#line default
        break;
      case 173: // expression -> LIT_INTEGER
#line 625 "CWinParser.y"
                   {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 174: // expression -> LIT_FLOAT
#line 626 "CWinParser.y"
                  {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 175: // expression -> variable
#line 627 "CWinParser.y"
                 {	double fValue;
											if (!getVariable(out fValue,ValueStack[ValueStack.Depth-1].str)) {	
												m_scanner.yyerror("can't find variable:" + ValueStack[ValueStack.Depth-1].str);
												YYError();
											}
											CurrentSemanticValue.value = fValue;
										}
#line default
        break;
      case 176: // expression -> expression, '|', expression
#line 634 "CWinParser.y"
                              {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value | (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 177: // expression -> expression, '&', expression
#line 635 "CWinParser.y"
                              {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value & (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 178: // expression -> expression, '^', expression
#line 636 "CWinParser.y"
                              {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value ^ (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 179: // expression -> expression, '+', expression
#line 637 "CWinParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value + ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 180: // expression -> expression, '-', expression
#line 638 "CWinParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value - ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 181: // expression -> expression, SHIFT_LEFT, expression
#line 639 "CWinParser.y"
                                   {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value << (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 182: // expression -> expression, SHIFT_RIGHT, expression
#line 640 "CWinParser.y"
                                    {	CurrentSemanticValue.value = (int) ValueStack[ValueStack.Depth-3].value >> (int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 183: // expression -> expression, POW, expression
#line 641 "CWinParser.y"
                              {	CurrentSemanticValue.value = Math.Pow(ValueStack[ValueStack.Depth-3].value,ValueStack[ValueStack.Depth-1].value);	}
#line default
        break;
      case 184: // expression -> expression, '*', expression
#line 642 "CWinParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value * ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 185: // expression -> expression, '/', expression
#line 643 "CWinParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value / ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 186: // expression -> expression, '%', expression
#line 644 "CWinParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value % ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 187: // expression -> '-', expression
#line 645 "CWinParser.y"
                             {	CurrentSemanticValue.value = -ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 188: // expression -> '+', expression
#line 646 "CWinParser.y"
                              {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 189: // expression -> '~', expression
#line 647 "CWinParser.y"
                      {	CurrentSemanticValue.value = ~(int) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 190: // expression -> '(', expression, ')'
#line 648 "CWinParser.y"
                         {	CurrentSemanticValue.value = ValueStack[ValueStack.Depth-2].value;	}
#line default
        break;
      case 191: // strexp -> LIT_STRING
#line 651 "CWinParser.y"
                  {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 192: // strexp -> strexp, '+', strexp
#line 652 "CWinParser.y"
                        {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-3].str + ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 193: // strexp -> strexp, '.', strexp
#line 653 "CWinParser.y"
                        {	CurrentSemanticValue.str = ValueStack[ValueStack.Depth-3].str + ValueStack[ValueStack.Depth-1].str;	}
#line default
        break;
      case 194: // color -> expression, ',', expression, ',', expression, ',', expression
#line 656 "CWinParser.y"
                                                          {
																	Color32	c;
																	if (ValueStack[ValueStack.Depth-7].value < 0 || ValueStack[ValueStack.Depth-7].value > 2f) {
																		m_scanner.yywarning("invalid color.r range[0-2]:" + ValueStack[ValueStack.Depth-7].value);
																	}
																	if (ValueStack[ValueStack.Depth-5].value < 0 || ValueStack[ValueStack.Depth-5].value > 2f) {
																		m_scanner.yywarning("invalid color.g range[0-2]:" + ValueStack[ValueStack.Depth-5].value);
																	}
																	if (ValueStack[ValueStack.Depth-3].value < 0 || ValueStack[ValueStack.Depth-3].value > 2f) {
																		m_scanner.yywarning("invalid color.b range[0-2]:" + ValueStack[ValueStack.Depth-3].value);
																	}
																	if (ValueStack[ValueStack.Depth-1].value < 0 || ValueStack[ValueStack.Depth-1].value > 1f) {
																		m_scanner.yywarning("invalid color.a range[0-1]:" + ValueStack[ValueStack.Depth-1].value);
																	}
																	c.r = (byte) Mathf.Clamp((float) ValueStack[ValueStack.Depth-7].value * 128f,0f,255f);
																	c.g = (byte) Mathf.Clamp((float) ValueStack[ValueStack.Depth-5].value * 128f,0f,255f);
																	c.b = (byte) Mathf.Clamp((float) ValueStack[ValueStack.Depth-3].value * 128f,0f,255f);
																	c.a = (byte) Mathf.Clamp((float) ValueStack[ValueStack.Depth-1].value * 255f,0f,255f);
																	CurrentSemanticValue.uvalue = (uint) ((c.a << 24)|(c.r << 16)|(c.g << 8)|c.b);
																}
#line default
        break;
      case 195: // color -> expression
#line 676 "CWinParser.y"
                         {	CurrentSemanticValue.uvalue = (uint) ValueStack[ValueStack.Depth-1].value;	}
#line default
        break;
      case 196: // windowstyles -> windowstyle
#line 680 "CWinParser.y"
                  {	CurrentSemanticValue.winstyle =  ValueStack[ValueStack.Depth-1].winstyle;	}
#line default
        break;
      case 197: // windowstyles -> windowstyles, '|', windowstyles
#line 681 "CWinParser.y"
                                {	CurrentSemanticValue.winstyle = ValueStack[ValueStack.Depth-3].winstyle | ValueStack[ValueStack.Depth-1].winstyle;	}
#line default
        break;
      case 198: // windowstyles -> windowstyles, ',', windowstyles
#line 682 "CWinParser.y"
                                {	CurrentSemanticValue.winstyle = ValueStack[ValueStack.Depth-3].winstyle | ValueStack[ValueStack.Depth-1].winstyle;	}
#line default
        break;
      case 199: // windowstyles -> windowstyles, '+', windowstyles
#line 683 "CWinParser.y"
                                {	CurrentSemanticValue.winstyle = ValueStack[ValueStack.Depth-3].winstyle | ValueStack[ValueStack.Depth-1].winstyle;	}
#line default
        break;
      case 200: // windowstyle -> WINDOW_STYLE_ANCHOR_DEFAULT
#line 686 "CWinParser.y"
                               {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_DEFAULT;	}
#line default
        break;
      case 201: // windowstyle -> WINDOW_STYLE_ANCHOR_LEFTTOP
#line 687 "CWinParser.y"
                               {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_LEFTTOP;	}
#line default
        break;
      case 202: // windowstyle -> WINDOW_STYLE_ANCHOR_LEFT
#line 688 "CWinParser.y"
                             {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_LEFT;	}
#line default
        break;
      case 203: // windowstyle -> WINDOW_STYLE_ANCHOR_LEFTBOTTOM
#line 689 "CWinParser.y"
                                  {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_LEFTBOTTOM;	}
#line default
        break;
      case 204: // windowstyle -> WINDOW_STYLE_ANCHOR_TOP
#line 690 "CWinParser.y"
                            {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_TOP;	}
#line default
        break;
      case 205: // windowstyle -> WINDOW_STYLE_ANCHOR_CENTER
#line 691 "CWinParser.y"
                               {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_CENTER;	}
#line default
        break;
      case 206: // windowstyle -> WINDOW_STYLE_ANCHOR_BOTTOM
#line 692 "CWinParser.y"
                               {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_BOTTOM;	}
#line default
        break;
      case 207: // windowstyle -> WINDOW_STYLE_ANCHOR_RIGHTTOP
#line 693 "CWinParser.y"
                                {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_RIGHTTOP;	}
#line default
        break;
      case 208: // windowstyle -> WINDOW_STYLE_ANCHOR_RIGHT
#line 694 "CWinParser.y"
                              {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_RIGHT;	}
#line default
        break;
      case 209: // windowstyle -> WINDOW_STYLE_ANCHOR_RIGHTBOTTOM
#line 695 "CWinParser.y"
                                  {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_RIGHTBOTTOM;	}
#line default
        break;
      case 210: // windowstyle -> WINDOW_STYLE_TOP
#line 696 "CWinParser.y"
                       {	CurrentSemanticValue.winstyle = e_WinStyle.TOP;	}
#line default
        break;
      case 211: // windowstyle -> WINDOW_STYLE_POPUP
#line 697 "CWinParser.y"
                         {	CurrentSemanticValue.winstyle = e_WinStyle.POPUP;	}
#line default
        break;
      case 212: // windowstyle -> WINDOW_STYLE_TOPMOST
#line 698 "CWinParser.y"
                         {	CurrentSemanticValue.winstyle = e_WinStyle.TOPMOST;	}
#line default
        break;
      case 213: // windowstyle -> WINDOW_STYLE_NOECLIPSE
#line 699 "CWinParser.y"
                           {	CurrentSemanticValue.winstyle = e_WinStyle.NOECLIPSE;	}
#line default
        break;
      case 214: // windowstyle -> WINDOW_STYLE_NOCLOSE
#line 700 "CWinParser.y"
                         {	CurrentSemanticValue.winstyle = e_WinStyle.NOCLOSE;	}
#line default
        break;
      case 215: // windowstyle -> WINDOW_STYLE_NOMINIMIZATION
#line 701 "CWinParser.y"
                              {	CurrentSemanticValue.winstyle = e_WinStyle.NOMINIMIZATION;	}
#line default
        break;
      case 216: // windowstyle -> WINDOW_STYLE_NOHELP
#line 702 "CWinParser.y"
                        {	CurrentSemanticValue.winstyle = e_WinStyle.NOHELP;	}
#line default
        break;
      case 217: // windowstyle -> WINDOW_STYLE_NOTITLEBAR
#line 703 "CWinParser.y"
                           {	CurrentSemanticValue.winstyle = e_WinStyle.NOTITLEBAR;	}
#line default
        break;
      case 218: // windowstyle -> WINDOW_STYLE_NOFRAME
#line 704 "CWinParser.y"
                         {	CurrentSemanticValue.winstyle = e_WinStyle.NOFRAME;	}
#line default
        break;
      case 219: // windowstyle -> WINDOW_STYLE_DISABLE
#line 705 "CWinParser.y"
                         {	CurrentSemanticValue.winstyle = e_WinStyle.DISABLE;	}
#line default
        break;
      case 220: // windowstyle -> WINDOW_STYLE_DRAG
#line 706 "CWinParser.y"
                       {	CurrentSemanticValue.winstyle = e_WinStyle.DRAG;	}
#line default
        break;
      case 221: // windowstyle -> WINDOW_STYLE_NOACTIVE
#line 707 "CWinParser.y"
                          {	CurrentSemanticValue.winstyle = e_WinStyle.NOACTIVE;	}
#line default
        break;
      case 222: // windowstyle -> WINDOW_STYLE_HIDE
#line 708 "CWinParser.y"
                       {	CurrentSemanticValue.winstyle = e_WinStyle.HIDE;	}
#line default
        break;
      case 223: // windowstyle -> WINDOW_STYLE_NOBRINGTOTOP
#line 709 "CWinParser.y"
                             {	CurrentSemanticValue.winstyle = e_WinStyle.NOBRINGTOTOP;	}
#line default
        break;
      case 224: // windowstyle -> WINDOW_STYLE_OPENBOTTOM
#line 710 "CWinParser.y"
                           {	CurrentSemanticValue.winstyle = e_WinStyle.OPENBOTTOM;	}
#line default
        break;
      case 225: // windowstyle -> ANCHOR_DEFAULT
#line 711 "CWinParser.y"
                     {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_DEFAULT;	}
#line default
        break;
      case 226: // windowstyle -> ANCHOR_LEFTTOP
#line 712 "CWinParser.y"
                     {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_LEFTTOP;	}
#line default
        break;
      case 227: // windowstyle -> ANCHOR_LEFT
#line 713 "CWinParser.y"
                  {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_LEFT;	}
#line default
        break;
      case 228: // windowstyle -> ANCHOR_LEFTBOTTOM
#line 714 "CWinParser.y"
                       {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_LEFTBOTTOM;	}
#line default
        break;
      case 229: // windowstyle -> ANCHOR_TOP
#line 715 "CWinParser.y"
                  {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_TOP;	}
#line default
        break;
      case 230: // windowstyle -> ANCHOR_CENTER
#line 716 "CWinParser.y"
                    {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_CENTER;	}
#line default
        break;
      case 231: // windowstyle -> ANCHOR_BOTTOM
#line 717 "CWinParser.y"
                    {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_BOTTOM;	}
#line default
        break;
      case 232: // windowstyle -> ANCHOR_RIGHTTOP
#line 718 "CWinParser.y"
                     {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_RIGHTTOP;	}
#line default
        break;
      case 233: // windowstyle -> ANCHOR_RIGHT
#line 719 "CWinParser.y"
                   {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_RIGHT;	}
#line default
        break;
      case 234: // windowstyle -> ANCHOR_RIGHTBOTTOM
#line 720 "CWinParser.y"
                        {	CurrentSemanticValue.winstyle = e_WinStyle.ANCHOR_RIGHTBOTTOM;	}
#line default
        break;
      case 235: // windowstyle -> TOP
#line 721 "CWinParser.y"
            {	CurrentSemanticValue.winstyle = e_WinStyle.TOP;	}
#line default
        break;
      case 236: // windowstyle -> POPUP
#line 722 "CWinParser.y"
              {	CurrentSemanticValue.winstyle = e_WinStyle.POPUP;	}
#line default
        break;
      case 237: // windowstyle -> TOPMOST
#line 723 "CWinParser.y"
               {	CurrentSemanticValue.winstyle = e_WinStyle.TOPMOST;	}
#line default
        break;
      case 238: // windowstyle -> NOECLIPSE
#line 724 "CWinParser.y"
                 {	CurrentSemanticValue.winstyle = e_WinStyle.NOECLIPSE;	}
#line default
        break;
      case 239: // windowstyle -> NOCLOSE
#line 725 "CWinParser.y"
               {	CurrentSemanticValue.winstyle = e_WinStyle.NOCLOSE;	}
#line default
        break;
      case 240: // windowstyle -> NOMINIMIZATION
#line 726 "CWinParser.y"
                     {	CurrentSemanticValue.winstyle = e_WinStyle.NOMINIMIZATION;	}
#line default
        break;
      case 241: // windowstyle -> NOHELP
#line 727 "CWinParser.y"
               {	CurrentSemanticValue.winstyle = e_WinStyle.NOHELP;	}
#line default
        break;
      case 242: // windowstyle -> NOTITLEBAR
#line 728 "CWinParser.y"
                  {	CurrentSemanticValue.winstyle = e_WinStyle.NOTITLEBAR;	}
#line default
        break;
      case 243: // windowstyle -> WINCTRL_FRAME
#line 729 "CWinParser.y"
                    {	CurrentSemanticValue.winstyle = e_WinStyle.FRAME;	}
#line default
        break;
      case 244: // windowstyle -> NOFRAME
#line 730 "CWinParser.y"
               {	CurrentSemanticValue.winstyle = e_WinStyle.NOFRAME;	}
#line default
        break;
      case 245: // windowstyle -> DISABLE
#line 731 "CWinParser.y"
               {	CurrentSemanticValue.winstyle = e_WinStyle.DISABLE;	}
#line default
        break;
      case 246: // windowstyle -> DRAG
#line 732 "CWinParser.y"
             {	CurrentSemanticValue.winstyle = e_WinStyle.DRAG;	}
#line default
        break;
      case 247: // windowstyle -> NOACTIVE
#line 733 "CWinParser.y"
                {	CurrentSemanticValue.winstyle = e_WinStyle.NOACTIVE;	}
#line default
        break;
      case 248: // windowstyle -> HIDE
#line 734 "CWinParser.y"
             {	CurrentSemanticValue.winstyle = e_WinStyle.HIDE;	}
#line default
        break;
      case 249: // windowstyle -> NOBRINGTOTOP
#line 735 "CWinParser.y"
                   {	CurrentSemanticValue.winstyle = e_WinStyle.NOBRINGTOTOP;	}
#line default
        break;
      case 250: // windowstyle -> OPENBOTTOM
#line 736 "CWinParser.y"
                  {	CurrentSemanticValue.winstyle = e_WinStyle.OPENBOTTOM;	}
#line default
        break;
      case 251: // ctrlstyles -> ctrlstyle
#line 740 "CWinParser.y"
                {	CurrentSemanticValue.ctrlstyles =  new Tokens[1];CurrentSemanticValue.ctrlstyles[0] = ValueStack[ValueStack.Depth-1].ctrlstyle;	}
#line default
        break;
      case 252: // ctrlstyles -> ctrlstyles, '|', ctrlstyles
#line 741 "CWinParser.y"
                             {	CurrentSemanticValue.ctrlstyles = new Tokens[ValueStack[ValueStack.Depth-3].ctrlstyles.Length + ValueStack[ValueStack.Depth-1].ctrlstyles.Length];
										Array.Copy(ValueStack[ValueStack.Depth-3].ctrlstyles,CurrentSemanticValue.ctrlstyles,ValueStack[ValueStack.Depth-3].ctrlstyles.Length);
										Array.Copy(ValueStack[ValueStack.Depth-1].ctrlstyles,0,CurrentSemanticValue.ctrlstyles,ValueStack[ValueStack.Depth-3].ctrlstyles.Length,ValueStack[ValueStack.Depth-1].ctrlstyles.Length);
									}
#line default
        break;
      case 253: // ctrlstyles -> ctrlstyles, ',', ctrlstyles
#line 745 "CWinParser.y"
                             {	CurrentSemanticValue.ctrlstyles = new Tokens[ValueStack[ValueStack.Depth-3].ctrlstyles.Length + ValueStack[ValueStack.Depth-1].ctrlstyles.Length];
										Array.Copy(ValueStack[ValueStack.Depth-3].ctrlstyles,CurrentSemanticValue.ctrlstyles,ValueStack[ValueStack.Depth-3].ctrlstyles.Length);
										Array.Copy(ValueStack[ValueStack.Depth-1].ctrlstyles,0,CurrentSemanticValue.ctrlstyles,ValueStack[ValueStack.Depth-3].ctrlstyles.Length,ValueStack[ValueStack.Depth-1].ctrlstyles.Length);
									}
#line default
        break;
      case 254: // ctrlstyles -> ctrlstyles, '+', ctrlstyles
#line 749 "CWinParser.y"
                             {	CurrentSemanticValue.ctrlstyles = new Tokens[ValueStack[ValueStack.Depth-3].ctrlstyles.Length + ValueStack[ValueStack.Depth-1].ctrlstyles.Length];
										Array.Copy(ValueStack[ValueStack.Depth-3].ctrlstyles,CurrentSemanticValue.ctrlstyles,ValueStack[ValueStack.Depth-3].ctrlstyles.Length);
										Array.Copy(ValueStack[ValueStack.Depth-1].ctrlstyles,0,CurrentSemanticValue.ctrlstyles,ValueStack[ValueStack.Depth-3].ctrlstyles.Length,ValueStack[ValueStack.Depth-1].ctrlstyles.Length);
									}
#line default
        break;
      case 255: // ctrlstyle -> ANCHOR_DEFAULT
#line 755 "CWinParser.y"
                    {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_DEFAULT;	}
#line default
        break;
      case 256: // ctrlstyle -> ANCHOR_LEFTTOP
#line 756 "CWinParser.y"
                    {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_LEFTTOP;	}
#line default
        break;
      case 257: // ctrlstyle -> ANCHOR_LEFT
#line 757 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_LEFT;	}
#line default
        break;
      case 258: // ctrlstyle -> ANCHOR_LEFTBOTTOM
#line 758 "CWinParser.y"
                      {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_LEFTBOTTOM;	}
#line default
        break;
      case 259: // ctrlstyle -> ANCHOR_TOP
#line 759 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_TOP;	}
#line default
        break;
      case 260: // ctrlstyle -> ANCHOR_CENTER
#line 760 "CWinParser.y"
                   {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_CENTER;	}
#line default
        break;
      case 261: // ctrlstyle -> ANCHOR_BOTTOM
#line 761 "CWinParser.y"
                   {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_BOTTOM;	}
#line default
        break;
      case 262: // ctrlstyle -> ANCHOR_RIGHTTOP
#line 762 "CWinParser.y"
                    {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_RIGHTTOP;	}
#line default
        break;
      case 263: // ctrlstyle -> ANCHOR_RIGHT
#line 763 "CWinParser.y"
                  {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_RIGHT;	}
#line default
        break;
      case 264: // ctrlstyle -> ANCHOR_RIGHTBOTTOM
#line 764 "CWinParser.y"
                       {	CurrentSemanticValue.ctrlstyle = Tokens.ANCHOR_RIGHTBOTTOM;	}
#line default
        break;
      case 265: // ctrlstyle -> BASE_DEFAULT
#line 765 "CWinParser.y"
                  {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_DEFAULT;	}
#line default
        break;
      case 266: // ctrlstyle -> BASE_LEFTTOP
#line 766 "CWinParser.y"
                  {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_LEFTTOP;	}
#line default
        break;
      case 267: // ctrlstyle -> BASE_LEFT
#line 767 "CWinParser.y"
                {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_LEFT;	}
#line default
        break;
      case 268: // ctrlstyle -> BASE_LEFTBOTTOM
#line 768 "CWinParser.y"
                    {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_LEFTBOTTOM;	}
#line default
        break;
      case 269: // ctrlstyle -> BASE_TOP
#line 769 "CWinParser.y"
               {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_TOP;	}
#line default
        break;
      case 270: // ctrlstyle -> BASE_CENTER
#line 770 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_CENTER;	}
#line default
        break;
      case 271: // ctrlstyle -> BASE_BOTTOM
#line 771 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_BOTTOM;	}
#line default
        break;
      case 272: // ctrlstyle -> BASE_RIGHTTOP
#line 772 "CWinParser.y"
                   {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_RIGHTTOP;	}
#line default
        break;
      case 273: // ctrlstyle -> BASE_RIGHT
#line 773 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_RIGHT;	}
#line default
        break;
      case 274: // ctrlstyle -> BASE_RIGHTBOTTOM
#line 774 "CWinParser.y"
                     {	CurrentSemanticValue.ctrlstyle = Tokens.BASE_RIGHTBOTTOM;	}
#line default
        break;
      case 275: // ctrlstyle -> TEXT_NONE
#line 775 "CWinParser.y"
                {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_NONE;	}
#line default
        break;
      case 276: // ctrlstyle -> TEXT_LEFT
#line 776 "CWinParser.y"
                {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_LEFT;	}
#line default
        break;
      case 277: // ctrlstyle -> TEXT_CENTER
#line 777 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_CENTER;	}
#line default
        break;
      case 278: // ctrlstyle -> TEXT_RIGHT
#line 778 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_RIGHT;	}
#line default
        break;
      case 279: // ctrlstyle -> TEXT_NORMAL
#line 779 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_NORMAL;	}
#line default
        break;
      case 280: // ctrlstyle -> TEXT_BOLD
#line 780 "CWinParser.y"
                {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_BOLD;	}
#line default
        break;
      case 281: // ctrlstyle -> TEXT_DENT
#line 781 "CWinParser.y"
                {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_DENT;	}
#line default
        break;
      case 282: // ctrlstyle -> TEXT_SHADOW
#line 782 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_SHADOW;	}
#line default
        break;
      case 283: // ctrlstyle -> TEXT_NOHYPHENATION
#line 783 "CWinParser.y"
                       {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_NOHYPHENATION;	}
#line default
        break;
      case 284: // ctrlstyle -> TEXT_AUTOSCALE
#line 784 "CWinParser.y"
                    {	CurrentSemanticValue.ctrlstyle = Tokens.TEXT_AUTOSCALE;	}
#line default
        break;
      case 285: // ctrlstyle -> HIDE
#line 785 "CWinParser.y"
            {	CurrentSemanticValue.ctrlstyle = Tokens.HIDE;	}
#line default
        break;
      case 286: // ctrlstyle -> DRAG
#line 786 "CWinParser.y"
            {	CurrentSemanticValue.ctrlstyle = Tokens.DRAG;	}
#line default
        break;
      case 287: // ctrlstyle -> DISABLE
#line 787 "CWinParser.y"
              {	CurrentSemanticValue.ctrlstyle = Tokens.DISABLE;	}
#line default
        break;
      case 288: // ctrlstyle -> NOHIT
#line 788 "CWinParser.y"
             {	CurrentSemanticValue.ctrlstyle = Tokens.NOHIT;	}
#line default
        break;
      case 289: // ctrlstyle -> HIT
#line 789 "CWinParser.y"
           {	CurrentSemanticValue.ctrlstyle = Tokens.HIT;	}
#line default
        break;
      case 290: // ctrlstyle -> EDIT_BLIND
#line 790 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_BLIND;	}
#line default
        break;
      case 291: // ctrlstyle -> EDIT_TYPE_ALL
#line 791 "CWinParser.y"
                   {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_ALL;	}
#line default
        break;
      case 292: // ctrlstyle -> EDIT_TYPE_ASCIICAPABLE
#line 792 "CWinParser.y"
                          {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_ASCIICAPABLE;	}
#line default
        break;
      case 293: // ctrlstyle -> EDIT_TYPE_NUMBERANDPUNCTUATION
#line 793 "CWinParser.y"
                                 {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_NUMBERANDPUNCTUATION;	}
#line default
        break;
      case 294: // ctrlstyle -> EDIT_TYPE_URL
#line 794 "CWinParser.y"
                   {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_URL;	}
#line default
        break;
      case 295: // ctrlstyle -> EDIT_TYPE_NUMBERPAD
#line 795 "CWinParser.y"
                       {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_NUMBERPAD;	}
#line default
        break;
      case 296: // ctrlstyle -> EDIT_TYPE_PHONEPAD
#line 796 "CWinParser.y"
                       {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_PHONEPAD;	}
#line default
        break;
      case 297: // ctrlstyle -> EDIT_TYPE_NAMEPHONEPAD
#line 797 "CWinParser.y"
                          {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_NAMEPHONEPAD;	}
#line default
        break;
      case 298: // ctrlstyle -> EDIT_TYPE_EMAILADDRESS
#line 798 "CWinParser.y"
                          {	CurrentSemanticValue.ctrlstyle = Tokens.EDIT_TYPE_EMAILADDRESS;	}
#line default
        break;
      case 299: // ctrlstyle -> NOBOUNCES
#line 799 "CWinParser.y"
                {	CurrentSemanticValue.ctrlstyle = Tokens.NOBOUNCES;	}
#line default
        break;
      case 300: // ctrlstyle -> ITEM_STACK_V
#line 800 "CWinParser.y"
                  {	CurrentSemanticValue.ctrlstyle = Tokens.ITEM_STACK_V;	}
#line default
        break;
      case 301: // ctrlstyle -> ITEM_STACK_H
#line 801 "CWinParser.y"
                  {	CurrentSemanticValue.ctrlstyle = Tokens.ITEM_STACK_H;	}
#line default
        break;
      case 302: // ctrlstyle -> SCROLL_LOOP
#line 802 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.SCROLL_LOOP;	}
#line default
        break;
      case 303: // ctrlstyle -> SCROLL_UNLOCK
#line 803 "CWinParser.y"
                   {	CurrentSemanticValue.ctrlstyle = Tokens.SCROLL_UNLOCK;	}
#line default
        break;
      case 304: // ctrlstyle -> SCROLL_LOCK
#line 804 "CWinParser.y"
                 {	CurrentSemanticValue.ctrlstyle = Tokens.SCROLL_LOCK;	}
#line default
        break;
      case 305: // ctrlstyle -> SCROLLBAR_DISPLAY_NORMAL
#line 805 "CWinParser.y"
                           {	CurrentSemanticValue.ctrlstyle = Tokens.SCROLLBAR_DISPLAY_NORMAL;	}
#line default
        break;
      case 306: // ctrlstyle -> SCROLLBAR_DISPLAY_SCROLLABLE
#line 806 "CWinParser.y"
                               {	CurrentSemanticValue.ctrlstyle = Tokens.SCROLLBAR_DISPLAY_SCROLLABLE;	}
#line default
        break;
      case 307: // ctrlstyle -> SCROLLBAR_DISPLAY_ALWAYS
#line 807 "CWinParser.y"
                           {	CurrentSemanticValue.ctrlstyle = Tokens.SCROLLBAR_DISPLAY_ALWAYS;	}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 811 "CWinParser.y"
CWinParserProperty		m_cWindowProperty = null;
string					m_name;
uint					m_id;
CWinParserCtrl			m_cTopCtrl = null;
uint					m_mAssetBundle = 0;
string					m_exportpath = "";
uint					m_texid = 0;
string					m_path;
Scanner					m_scanner;
string					m_baseclass = "CWindowBase";

Dictionary<string,double>	m_dicVariable = new Dictionary<string,double>();
//==============================================================================================
/*!
	@brief	setWindowProperty
	@note	
*/
//==============================================================================================
void setWindowProperty(uint id,CWinParserProperty cProperty) {
	m_id = id;
	m_cWindowProperty = cProperty;
}
//==============================================================================================
/*!
	@brief	registVariable
	@note	
*/
//==============================================================================================
void registVariable(string sVariable,double fValue)
{
	m_dicVariable[sVariable] = fValue;
}
Vector3[] createPairRatio(Vector4 xratio,Vector4 yratio) {
	Vector3[]	pair = new Vector3[2];
	pair[0] = new Vector3(xratio.x,xratio.y + xratio.w,xratio.z);
	pair[1] = new Vector3(yratio.x,yratio.y,yratio.z + yratio.w);
	return pair;
}
//==============================================================================================
/*!
	@brief	getVariable
	@note	
*/
//==============================================================================================
bool getVariable(out double rValue,string sVariable)
{
	if (m_dicVariable.TryGetValue(sVariable,out rValue)) {
		return true;
	}
	rValue = 0;
	return false;
}
int parsePragma(string sPragma)
{
	string[] param = sPragma.Split(null);
	if (param.Length == 0) {
		return 0;
	}
	if (param[0] == "RESOURCE") {
		if (param.Length < 2) {
			return -1;
		} else {
			if (MulId.isMulId(param[1])) {
				m_exportpath = "";
				m_mAssetBundle = new MulId(param[1]);
			} else {
				m_exportpath = param[1];
				m_mAssetBundle = 0;
			}
		}
		return 0;
	}
	if (param[0] == "PATH") {
		if (param.Length < 2) {
			return -1;
		}
		m_path = param[1];
		return 0;
	}
	if (param[0] == "TEXTURE") {
		if (param.Length < 2) {
			return -1;
		}
		m_texid = new MulId(param[1]);
		return 0;
	}
	if (param[0] == "BASECLASS") {
		if (param.Length < 2) {
			return -1;
		}
		m_baseclass = param[1];
		return 0;
	}
	return -1;
}

public Parser() : base(null) { }
//==============================================================================================
/*!
	@brief	compile
	@note	
*/
//==============================================================================================
static public Parser compile(string file,string basepath) {
	//--------------------------------
	// gcc preprocessor
	string output;
	if (CParserHelper.preprocess(out output,KsSoftConfig.Preprocessor,KsSoftConfig.WindowResourcePreprocessorArguments,file,true) != 0) {
		return null;
	}
	// change code UTF8 from UTF16
	UTF8Encoding utf8enc = new UTF8Encoding();
	byte[] aOutput = utf8enc.GetBytes(output);
	
	// create memory stream
	MemoryStream ms = new MemoryStream();
	ms.Write(aOutput,0,aOutput.Length);
	ms.Seek(0,SeekOrigin.Begin);
	
	// start parse
	Parser parser = new Parser();
	Scanner scanner = new Scanner(ms);
	parser.Scanner = scanner;
	parser.m_scanner = scanner;
	parser.name = System.IO.Path.GetFileNameWithoutExtension(file);
	parser.path = basepath;
	if (!parser.Parse() || parser.ErrorNum > 0) {
		ms.Close();
	}
	return parser;
}
public uint id {
	get {
		return m_id;
	}
}
public string name {
	get {
		return m_name;
	}
	set {
		m_name = value;
	}
}
public CWinParserProperty property {
	get {
		return m_cWindowProperty;
	}
}
public CWinParserCtrl topCtrl {
	get {
		return m_cTopCtrl;
	}
	set {
		m_cTopCtrl = value;
	}
}
public bool isResource {
	get {
		return (m_mAssetBundle == 0)? true:false;
	}
}
public string  path {
	get {
		return m_path;
	}
	set {
		m_path = value;
	}
}
public uint  assetbundle {
	get {
		return m_mAssetBundle;
	}
}
public string  exportpath {
	get {
		return m_exportpath;
	}
}
public uint  texid {
	get {
		return m_texid;
	}
}
public string baseclass {
	get {
		return m_baseclass;
	}
}
public int ErrorNum {
	get {
		return m_scanner.ErrorNum;
	}
}
public int WarningNum {
	get {
		return m_scanner.WarningNum;
	}
}

override public string ToString() {
	return  m_name + "(" + new MulId(m_id) + ")";
}
#line default
}
}
